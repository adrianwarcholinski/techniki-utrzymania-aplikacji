@startuml
title
MOK.10 ZmieÅ„ adres e-mail swojego konta
end title

autoactivate on
participant AccountEndpoint
participant "AccountManager\nTransactionAttribute.REQUIRES_NEW" as AccountManager
control "AccountFacadeReadCommitted\nTransactionAttribute.MANDATORY" as AccountFacadeReadCommitted
control "ExpiredTokenFacadeReadCommitted\nTransactionAttribute.MANDATORY" as ExpiredTokenFacadeReadCommitted
entity AccountEntity
entity ExpiredTokenEntity
participant Crypt
participant EmailSender

alt correct
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail, lang, byAdmin=false)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
                    AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                    return empty optional
                    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin, login, newEmail, LocalDateTime.now().toString())
                    return emailMessage
                    AccountManager -> EmailSender: sendEmail(emailMessage)
                    return success
               
            return success
    note right of AccountEndpoint
    [...]
    end note

                AccountEndpoint -> AccountManager: changeEmail(cipherText)
                    
                        AccountManager -> ExpiredTokenFacadeReadCommitted: findByToken(cipherText)
                        return empty optional
                        AccountManager -> Crypt: decrypt(cipherText)
                        return decrypted login and email
                        AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                        return optional with account
                        AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
                        return empty optional
                        AccountManager -> AccountEntity: setEmail(newEmail)
                        return success
                        AccountManager -> AccountFacadeReadCommitted: edit(account)
                        return success
                        AccountManager -> ExpiredTokenEntity **: <<create>>

                        AccountManager -> ExpiredTokenFacadeReadCommitted: create(expiredToken);
                        return success
             
                return success

else account does not exist
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return empty optional
         
            return account does not exist
 
else new email equals old
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
           
            return new email equals old
 
else email already in use
autonumber

                AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail)
                    
                        AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                        return optional with account
                        AccountManager -> AccountEntity: getEmail()
                        return current account email
                        AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                        return optional with account
                  
                return email already in use
 
else link expired
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail, lang, byAdmin=false)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
                    AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                    return empty optional
                    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin, login, newEmail, LocalDateTime.now().toString())
                    return emailMessage
                    AccountManager -> EmailSender: sendEmail(emailMessage)
                    return success
            
            return success
    note right of AccountEndpoint
    [...]
    end note

                AccountEndpoint -> AccountManager: changeEmail(cipherText)
                    
                        AccountManager -> ExpiredTokenFacadeReadCommitted: findByToken(cipherText)
                        return optional with token
                   
                return link expired

else link is corrupted
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail, lang, byAdmin=false)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
                    AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                    return empty optional
                    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin, login, newEmail, LocalDateTime.now().toString())
                    return emailMessage
                    AccountManager -> EmailSender: sendEmail(emailMessage)
                    return success
               
            return success
    note right of AccountEndpoint
    [...]
    end note

                AccountEndpoint -> AccountManager: changeEmail(cipherText)
                    
                        AccountManager -> ExpiredTokenFacadeReadCommitted: findByToken(cipherText)
                        return empty optional
                        AccountManager -> Crypt: decrypt(cipherText)
                        return error
                  
                return link corrupted

else account deleted before visiting link
autonumber

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail, lang, byAdmin=false)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
                    AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                    return empty optional
                    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin, login, newEmail, LocalDateTime.now().toString())
                    return emailMessage
                    AccountManager -> EmailSender: sendEmail(emailMessage)
                    return success
               
            return success
    note right of AccountEndpoint
    [...]
    end note

                AccountEndpoint -> AccountManager: changeEmail(cipherText)
                    
                        AccountManager -> ExpiredTokenFacadeReadCommitted: findByToken(cipherText)
                        return empty optional
                        AccountManager -> Crypt: decrypt(cipherText)
                        return decrypted login and email
                        AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                        return empty optional
             
                return account deleted before visiting link

else email is already in use
autonumber
    

            AccountEndpoint -> AccountManager: sendEmailForChangeEmail(principal.getName(), newEmail, lang, byAdmin=false)
                
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getEmail()
                    return current account email
                    AccountManager -> AccountFacadeReadCommitted: findByEmail(newEmail)
                    return empty optional
                    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin, login, newEmail, LocalDateTime.now().toString())
                    return emailMessage
                    AccountManager -> EmailSender: sendEmail(emailMessage)
                    return success
           
            return success
    note right of AccountEndpoint
    [...]
    end note

                AccountEndpoint -> AccountManager: changeEmail(cipherText)
                    
                        AccountManager -> ExpiredTokenFacadeReadCommitted: findByToken(cipherText)
                        return empty optional
                        AccountManager -> Crypt: decrypt(cipherText)
                        return decrypted login and email
                        AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                        return optional with account
                        AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
                        return optional with account
                
                return email is already in use

end
@enduml
