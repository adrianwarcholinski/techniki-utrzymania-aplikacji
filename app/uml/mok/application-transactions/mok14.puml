@startuml
title
MOK.14 Zmień adres e-mail konta innego użytkownika
end title

autoactivate on
participant AccountEndpoint
participant "AccountManager\nTransactionAttribute.REQUIRES_NEW" as AccountManager
participant EmailSender
participant EmailCreator
participant Crypt
control "AccountFacade\nTransactionAttribute.MANDATORY" as AccountFacade
control "ExpiredTokenFacade\nTransactionAttribute.MANDATORY" as ExpiredTokenFacade
entity AccountEntity
entity ExpiredTokenEntity

alt correct
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
        AccountManager -> AccountFacade: findByEmail(newEmail)
        return empty optional
        AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin,\n login, newEmail, LocalDateTime.now().toString())
        return emailMessage
        AccountManager -> EmailSender: sendEmail(emailMessage)
        return success
return success
note right of AccountEndpoint
    [...]
    end note
    AccountEndpoint -> AccountManager: changeEmail(toVerify)
            AccountManager -> ExpiredTokenFacade: findByToken(cipherText)
            return empty optional
            AccountManager -> Crypt: decrypt(cipherText)
            return decrypted login and email
            AccountManager -> AccountFacade: findByLogin(login)
            return optional with account
            AccountManager -> AccountFacade: findByEmail(email)
            return empty optional
            AccountManager -> AccountEntity: setEmail(newEmail)
            return success
            AccountManager -> AccountFacade: edit(account)
            return success
            create ExpiredTokenEntity
            AccountManager -> ExpiredTokenEntity**:<<create>>
            AccountManager -> ExpiredTokenFacade: create(expiredToken);
            return success
    return success
else account does not exist
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return empty optional
return account does not exist
else new email equals old
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
return new email equals old
else email already in use
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
        AccountManager -> AccountFacade: findByEmail(newEmail)
        return optional with account
return email already in use
else link expired
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
    AccountManager -> AccountFacade: findByLogin(login)
    return optional with account
    AccountManager -> AccountEntity: getEmail()
    return current account email
    AccountManager -> AccountFacade: findByEmail(newEmail)
    return empty optional
    AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin,\n login, newEmail, LocalDateTime.now().toString())
    return emailMessage
    AccountManager -> EmailSender: sendEmail(emailMessage)
    return success
return success
note right of AccountEndpoint
    [...]
    end note
AccountEndpoint -> AccountManager: changeEmail(toVerify)
        AccountManager -> ExpiredTokenFacade: findByToken(cipherText)
        return optional with token
return link expired
else link is corrupted
autonumber
    AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
        AccountManager -> AccountFacade: findByEmail(newEmail)
        return empty optional
        AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin,\n login, newEmail, LocalDateTime.now().toString())
        return emailMessage
        AccountManager -> EmailSender: sendEmail(emailMessage)
        return success
    return 'link sent' message
    note right of AccountEndpoint
        [...]
        end note
    AccountEndpoint -> AccountManager: changeEmail(toVerify)
            AccountManager -> ExpiredTokenFacade: findByToken(cipherText)
            return empty optional
            AccountManager -> Crypt: decrypt(cipherText)
            return error
    return link corrupted
else account deleted before visiting link
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
        AccountManager -> AccountFacade: findByEmail(newEmail)
        return empty optional
        AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin,\n login, newEmail, LocalDateTime.now().toString())
        return emailMessage
        AccountManager -> EmailSender: sendEmail(emailMessage)
        return success
return success
note right of AccountEndpoint
    [...]
    end note
    AccountEndpoint -> AccountManager: changeEmail(toVerify)
            AccountManager -> ExpiredTokenFacade: findByToken(cipherText)
            return empty optional
            AccountManager -> Crypt: decrypt(cipherText)
            return decrypted login and email
            AccountManager -> AccountFacade: findByLogin(login)
            return empty optional
    return account deleted before visiting link
else email is already in use
autonumber
AccountEndpoint -> AccountManager: sendEmailForChangeEmail(login, newEmail, lang, byAdmin=true)
        AccountManager -> AccountFacade: findByLogin(login)
        return optional with account
        AccountManager -> AccountEntity: getEmail()
        return current account email
        AccountManager -> AccountFacade: findByEmail(newEmail)
        return empty optional
        AccountManager -> EmailCreator: getEmailForChangeEmail(lang, newEmail, byAdmin,\n login, newEmail, LocalDateTime.now().toString())
        return emailMessage
        AccountManager -> EmailSender: sendEmail(emailMessage)
        return success
return success
note right of AccountEndpoint
    [...]
    end note
    AccountEndpoint -> AccountManager: changeEmail(toVerify)
            AccountManager -> ExpiredTokenFacade: findByToken(cipherText)
            return empty optional
            AccountManager -> Crypt: decrypt(cipherText)
            return decrypted login and email
            AccountManager -> AccountFacade: findByLogin(login)
            return optional with account
            AccountManager -> AccountFacade: findByEmail(email)
            return optional with account
    return email is already in use
end
@enduml