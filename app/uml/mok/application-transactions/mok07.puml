@startuml

title
MOK.7 Resetuj hasÅ‚o
end title

autoactivate on

participant AccountEndpoint
participant AuthenticationEndpoint
participant "AccountManager\nTransactionAttributeType.REQUIRES_NEW" as AccountManager
participant EmailCreator
participant EmailSender
participant URLUtils
participant Crypt
participant Pbkdf2PasswordHash
control "AccountFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as AccountFacadeReadCommitted
entity AccountEntity
alt account exists
autonumber
    AuthenticationEndpoint -> AccountManager: sendEmailForResetPassword(email, language)
        AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
        return optional with account
        AccountManager -> EmailCreator: getResetPasswordEmail\n(browserLanguage, account.email, account.login, tokenLifeTime)
            EmailCreator -> URLUtils: createUrl(path, params)
                URLUtils -> Crypt: encrypt(elements)
                return token containing login and tokenLifeTime
            return url for reset password
        return email with encrypted link
        AccountManager -> EmailSender: sendEmail(email)
        return success
    return success
    note right of AccountEndpoint
    [...]
    end note
    AccountEndpoint -> AccountManager: resetPassword(login, newPassword)
        AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
        return optional with account
        AccountManager -> Pbkdf2PasswordHash: generate(newPassword)
        return newPasswordHash
        AccountManager -> AccountEntity: setPassword(newPasswordHash)
        return success
        AccountManager -> AccountFacadeReadCommitted: edit(account)
        return success
    return success
else invalid password, link expired, link corrupted
autonumber
    AuthenticationEndpoint -> AccountManager: sendEmailForResetPassword(email, language)
        AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
        return optional with account
        AccountManager -> EmailCreator: getResetPasswordEmail\n(browserLanguage, account.email, account.login, tokenLifeTime)
            EmailCreator -> URLUtils: createUrl(path, params)
                URLUtils -> Crypt: encrypt(elements)
                return token containing login and tokenLifeTime
            return url for reset password
        return email with encrypted link
        AccountManager -> EmailSender: sendEmail(email)
        return success
    return success
else account does not exist
autonumber
    AuthenticationEndpoint -> AccountManager: sendEmailForResetPassword(email, language)
        AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
        return empty optional
    return account does not exist
end

@enduml