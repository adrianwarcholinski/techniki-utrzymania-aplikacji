@startuml
title
MOK.5 Zablokuj konto
end title

autoactivate on
participant AccountEndpoint
participant SendingEmailEndpoint
participant "AccountManager\nTransactionAttribute.REQUIRES_NEW" as AccountManager
control "AccountFacadeReadCommitted\nTransactionAttribute.MANDATORY" as AccountFacadeReadCommitted
control "AdminFacadeReadCommitted\nTransactionAttribute.MANDATORY" as AdminFacadeReadCommitted
entity AccountEntity
alt account is already unlocked
autonumber
            AccountEndpoint -> AccountManager: lockAccount(login)
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: isVerified()
                    return true
                    AccountManager -> AccountEntity: isActive()
                    return true
                    AccountManager -> AdminFacadeReadCommitted: countActive(true)
                    return number of active admins
                    opt There is only one active administrator in the system
                        AccountManager -> AccountEntity: getAccessLevels()
                        return list of account access levels
                    end
                    AccountManager -> AccountEntity: setActive(false)
                    return success


                    AccountManager -> AccountFacadeReadCommitted: edit(account)
                    return success
            return success
    note right of AccountEndpoint
    [...]
    end note
            SendingEmailEndpoint -> AccountManager: isVerifiedAccountWithEmail(email)
                AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
                return optional with account
                AccountManager -> AccountEntity: isVerified()
                return true
            return true
          
else account does not exist
autonumber
             AccountEndpoint -> AccountManager: lockAccount(login)
                
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return empty optional
             return account does not exist

else account is not verified
autonumber
             AccountEndpoint -> AccountManager: lockAccount(login)  
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return false
             return account is not verified

else account is already locked
autonumber
             AccountEndpoint -> AccountManager: lockAccount(login)   
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return true
                     AccountManager -> AccountEntity: isActive()
                     return false
             return account is already locked
else attempt to lock last admin account
autonumber
             AccountEndpoint -> AccountManager: lockAccount(login)  
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return true
                     AccountManager -> AccountEntity: isActive()
                     return true
                     AccountManager -> AdminFacadeReadCommitted: countActive(true)
                     return number 1
                     AccountManager -> AccountEntity: getAccessLevels()
                     return list of account access levels with admin level
             return attempt to lock last admin account

end
@enduml
