@startuml

title MOK.3c Dołącz poziom dostępu do konta
autoactivate on
actor Administrator
boundary AccessLevelsView
participant AccountEndpoint
participant AccountManager
control AccountFacadeReadCommitted as AccountFacade
control CustomerFacadeReacCommitted as CustomerFacade
control AccessLevelFacadeReadCommitted as AccessLevelFacade
control SecurityContext
entity AccountEntity
entity AccessLevelEntity

alt access level is not granted
autonumber
    Administrator -> AccessLevelsView: 'grant' button clicked
        AccessLevelsView -> AccountEndpoint: grantCustomerAccessLevel(login, phoneNumber)
            AccountEndpoint -> AccountManager: grantAccessLevel("ROLE_CUSTOMER", login, phoneNumber)
            group RW, read committed
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with account
                AccountManager -> CustomerFacade: findByPhoneNumber(phoneNumber)
                return optional with accountEntity
                AccountManager -> AccessLevelFacade: findByAccessLevelAndLogin("ROLE_CUSTOMER", login)
                return optional with accessLevelEntity
                opt accessLevelEntity is present
                    AccountManager -> AccessLevelEntity: isActive()
                    return false
                    AccountManager -> AccessLevelEntity: setActive(true)
                    return success
                    AccountManager -> AccessLevelEntity: setPhoneNumber(phoneNumber)
                    return success
                    AccountManager -> CustomerFacade: edit(accessLevelEntity)
                    return success
                else accessLevelEntity is empty
                    AccountManager -> AdminEntity **: <<create>>
                    AccountManager -> AdminEntity: setActive(true)
                    return success
                    AccountManager -> AccountEntity: getAccessLevels().add(customerEntity)
                    return success
                    AccountManager -> CustomerFacade: create(customerEntity)
                    return success
                end
            end
            return success
        return status code 200
    return 'success' message

else access level is already granted
autonumber
    Administrator -> AccessLevelsView: 'grant' button clicked
        AccessLevelsView -> AccountEndpoint: grantCustomerAccessLevel(login, phoneNumber)
            AccountEndpoint -> AccountManager: grantAccessLevel("ROLE_CUSTOMER", login, phoneNumber)
            group RW, read committed
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with account
                AccountManager -> CustomerFacade: findByPhoneNumber(phoneNumber)
                return optional with accountEntity
                AccountManager -> AccessLevelFacade: findByAccessLevelAndLogin("ROLE_CUSTOMER", login)
                return optional with accessLevelEntity
                AccountManager -> AccessLevelEntity: isActive()
                return true
            end
            return access level is already granted
        return status code 400
    return 'failed' message

else account does not exist
autonumber
    Administrator -> AccessLevelsView: 'grant' button clicked
        AccessLevelsView -> AccountEndpoint: grantCustomerAccessLevel(login, phoneNumber)
            AccountEndpoint -> AccountManager: grantAccessLevel("ROLE_CUSTOMER", login, phoneNumber)
            group RW, read committed
                AccountManager -> AccountFacade: findByLogin(login)
                return empty optional
            end
            return account does not exist
        return status code 400
    return 'failed' message

end
@enduml