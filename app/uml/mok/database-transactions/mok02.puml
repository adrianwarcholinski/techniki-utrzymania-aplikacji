@startuml

title MOK.2 Utwórz konto innego użytkownika
autoactivate on
actor Administrator
actor Guest
boundary AddNewAccountForm
boundary VerificationConfirmView
participant AccountEndpoint
participant CaptchaUtils
participant AccountDto
participant AccountManager
participant HashGenerator
participant Pbkdf2PasswordHash
participant EmailCreator
participant EmailSender
participant Crypt
control SecurityContext
control AccountFacadeReadCommitted as AccountFacade
entity AccountEntity
entity AccessLevelEntity

alt correct
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByEmail(accountEntity.getEmail())
                return empty optional
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return empty optional
                AccountManager -> AccountEntity: setPassword(hashedPassword)
                return success
                AccountManager -> AccountEntity: getAccessLevels().get(0)
                return accessLevel
                AccountManager -> AccountManager: checkGrantIsAvailable(accessLevel, accountEntity.getLogin())
                return true
                AccountManager -> AccountFacade: create(accountEntity)
                return success
                AccountManager -> EmailCreator: getVerificationEmail(language, \naccountEntity.getEmail(), \nLocalDateTime.now(), \naccountEntity.login)
                return email with encrypted link
                AccountManager -> EmailSender: sendEmail(email)
                return success
            end
            return success
        return status code 200
    return 'verification link sent' message

    Guest -> VerificationConfirmView: link visited
        VerificationConfirmView -> AccountEndpoint: verifyAccount(toVerify, language)
            AccountEndpoint -> Crypt: decrypt(toVerify)
            return login, expiration time
            AccountEndpoint -> AccountManager: verifyAccount(login, language)
            group RW, read committed
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with accountEntity
                AccountManager -> AccountEntity: isVerified()
                return false
                AccountManager -> AccessLevelEntity: setVerified(true)
                return success
                AccountManager -> AccountFacade: edit(accountEntity)
                return success
                AccountManager -> EmailCreator: getVerificationConfirmEmail(language, accountEntity.getEmail(), accountEntity.getLogin())
                return email
                AccountManager -> EmailSender: sendEmail(email)
                return success
            end
            return success
        return status code 200
    return 'Account verified successfully' message

else invalid form input
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
        return status code 400 \n invalid input
    return 'invalid input' message

else login exists
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return optional with accountEntity
            end
            return login exists
        return status code 400 \n login exists
    return 'login exists' message

else email exists
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return empty optional
                AccountManager -> AccountFacade: findByEmail(accountEntity.getEmail())
                return optional with account
            end
            return email exists
        return status code 400 \n email exists
    return 'email exists' message

else link corrupted
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return empty optional
                AccountManager -> AccountFacade: findByEmail(accountEntity.getEmail())
                return empty optional
                AccountManager -> AccountEntity: setPassword(hashedPassword)
                return success
                AccountManager -> AccountEntity: getAccessLevels().get(0)
                return accessLevel
                AccountManager -> AccountManager: checkGrantIsAvailable(accessLevel, accountEntity.getLogin())
                return true
                AccountManager -> AccountFacade: create(accountEntity)
                return success
                AccountManager -> EmailCreator: getVerificationEmail(language, \naccountEntity.getEmail(), \nLocalDateTime.now(), \naccountEntity.login)
                return email with encrypted link
                AccountManager -> EmailSender: sendEmail(email)
                return success
            end
            return success
        return status code 200
    return 'Account registered successfully (verification link sent)' message

    Guest -> VerificationConfirmView: link visited
        VerificationConfirmView -> AccountEndpoint: verifyAccount(toVerify, language)
            AccountEndpoint -> Crypt: decrypt(toVerify)
            return throw AppException
        return status code 400 \n invalid link
    return 'invalid link' message

else link expired
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return empty optional
                AccountManager -> AccountFacade: findByEmail(accountEntity.getEmail())
                return empty optional
                AccountManager -> AccountEntity: setPassword(hashedPassword)
                return success
                AccountManager -> AccountEntity: getAccessLevels().get(0)
                return accessLevel
                AccountManager -> AccountManager: checkGrantIsAvailable(accessLevel, accountEntity.getLogin())
                return true
                AccountManager -> AccountFacade: create(accountEntity)
                return success
                AccountManager -> EmailCreator: getVerificationEmail(language, \naccountEntity.getEmail(), \nLocalDateTime.now(), \naccountEntity.login)
                return email with encrypted link
                AccountManager -> EmailSender: sendEmail(email)
                return success
            end
            return success
        return status code 200
    return 'Account registered successfully (verification link sent)' message

    Guest -> VerificationConfirmView: link visited
        VerificationConfirmView -> AccountEndpoint: verifyAccount(toVerify, language)
            AccountEndpoint -> Crypt: decrypt(toVerify)
            return login, expiration time
            AccountEndpoint -> AccountManager: verifyAccount(login, language)
            group RW, read committed
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with accountEntity
                AccountManager -> AccountEntity: isVerified()
                return true
            end
            return throw AppException
        return status code 400 \n link expired
    return 'link expired' message

else link  such card number/work phone number/phone number already exists
autonumber
    Administrator ->  AddNewAccountForm: 'submit' button clicked
        AddNewAccountForm -> AccountEndpoint: addAccount(accountDto, accessLevel, language, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return true
            AccountEndpoint -> AccountDto: convertToAccountEntity(accountDto)
            return accountEntity
            AccountEndpoint -> AccountEntity: setActive(true)
            return true
            AccountEndpoint -> AccountDto: createAccountAccessLevelEntity(accessLevel, accountEntity, accountDto)
            return accessLevelEntity
            AccountEndpoint -> AccessLevelEntity: setActive(true)
            return success
            AccountEndpoint -> AccountEntity: getAccessLevels().add(accessLevelEntity)
            return success
            AccountEndpoint -> AccountManager: addAccount(accountEntity, language)
            group RW, read committed
                AccountManager -> HashGenerator: generatePasswordHash(account.getPassword())
                return hashedPassword
                AccountManager -> AccountFacade: findByLogin(accountEntity.getLogin())
                return empty optional
                AccountManager -> AccountFacade: findByEmail(accountEntity.getEmail())
                return empty optional
                AccountManager -> AccountEntity: setPassword(hashedPassword)
                return success
                AccountManager -> AccountEntity: getAccessLevels().get(0)
                return accessLevel
                AccountManager -> AccountManager: checkGrantIsAvailable(accessLevel, accountEntity.getLogin())
                return false
            end
            return failed
        return status code 400 \n card number/work phone number/phone number already exists
    return 'Card number/work phone number/phone number already exists' message

end
@enduml
