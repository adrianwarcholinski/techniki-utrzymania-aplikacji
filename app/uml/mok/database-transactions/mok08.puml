@startuml
title
MOK.8 Zmień hasło swojego konta
end title

autoactivate on
actor "Admin~/Employee~/Customer"
boundary ChangeOwnPasswordForm
participant AccountEndpoint
participant AccountManager
control AccountFacadeReadCommitted
entity AccountEntity
participant SecurityContext
participant HashGenerator
participant CaptchaUtils

alt correct
autonumber
    "Admin~/Employee~/Customer" -> ChangeOwnPasswordForm: 'Change password' button clicked and confirmed
        ChangeOwnPasswordForm -> AccountEndpoint: changeOwnPassword(oldPassword, newPassword, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return positive validation result
            AccountEndpoint -> SecurityContext: getCallerPrincipal()
            return principal
            AccountEndpoint -> AccountManager: changeOwnPassword(principal.getName(), oldPassword, newPassword)
                group RW, read committed
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getPassword()
                    return currentPasswordHash
                    AccountManager -> HashGenerator: verifyPassword(oldPassword, currentPasswordHash)
                    return correct
                    AccountManager -> HashGenerator: generatePasswordHash(newPassword)
                    return newPasswordHash
                    AccountManager -> AccountEntity: setPassword(newPasswordHash)
                    return success

                    AccountManager -> AccountFacadeReadCommitted: edit(account)
                    return success
                end
            return success
        return status code 200
    return 'success' message
else password does not meet the requirements \n new password equals to current
autonumber
    "Admin~/Employee~/Customer" -> ChangeOwnPasswordForm: 'Change password' button clicked and confirmed
        ChangeOwnPasswordForm -> AccountEndpoint: changeOwnPassword(oldPassword, newPassword, captchaToken)
        return status code 400
    return 'error' message
else incorrect captcha
autonumber
    "Admin~/Employee~/Customer" -> ChangeOwnPasswordForm: 'Change password' button clicked and confirmed
        ChangeOwnPasswordForm -> AccountEndpoint: changeOwnPassword(oldPassword, newPassword, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return negative validation result
        return status code 400
    return 'error' message
else account does not exist
autonumber
    "Admin~/Employee~/Customer" -> ChangeOwnPasswordForm: 'Change password' button clicked and confirmed
        ChangeOwnPasswordForm -> AccountEndpoint: changeOwnPassword(oldPassword, newPassword, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return positive validation result
            AccountEndpoint -> SecurityContext: getCallerPrincipal()
            return principal
            AccountEndpoint -> AccountManager: changeOwnPassword(principal.getName(), oldPassword, newPassword)
                group RW, read committed
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return empty optional
                end
            return account does not exist
         return status code 400
     return 'error' message
else invalid old password
autonumber
    "Admin~/Employee~/Customer" -> ChangeOwnPasswordForm: 'Change password' button clicked and confirmed
        ChangeOwnPasswordForm -> AccountEndpoint: changeOwnPassword(oldPassword, newPassword, captchaToken)
            AccountEndpoint -> CaptchaUtils: validateToken(captchaToken)
            return positive validation result
            AccountEndpoint -> SecurityContext: getCallerPrincipal()
            return principal
            AccountEndpoint -> AccountManager: changeOwnPassword(principal.getName(), oldPassword, newPassword)
                group RW, read committed
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getPassword()
                    return currentPasswordHash
                    AccountManager -> HashGenerator: verifyPassword(oldPassword, currentPasswordHash)
                    return incorrect
                end
            return invalid old password
         return status code 400
     return 'error' message
end
@enduml
