@startuml
autoactivate on
title MOK.18 Zaloguj siÄ™
actor Guest
boundary LoginForm as GUI
participant AuthenticationEndpoint
participant AccountManager
control AccountFacade
control AdminFacade
entity AccountEntity
participant UsernamePasswordCredential
participant IdentityStoreHandler
participant CredentialValidationResult
participant HttpServletRequest
participant LastAuthenticationTimes
participant LoginResponseDto
participant EmailCreator
participant EmailSender
participant JWTTokenUtils

alt login and password are correct
autonumber
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest,\n login, password, language)
        AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
        AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
        return credentialValidationResult
        AuthenticationEndpoint -> CredentialValidationResult: getStatus()
        return CredentialValidationResult.Status.VALID
        AuthenticationEndpoint -> CredentialValidationResult: getCallerPrincipal()
        return principal
        AuthenticationEndpoint -> CredentialValidationResult: getCallerGroups()
        return set of callerGroups
        AuthenticationEndpoint -> HttpServletRequest: getRemoteAddr()
        return ip address
        group RO, read committed
        AuthenticationEndpoint -> AccountManager: getLastAuthenticationTimes(principal.getName())
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with account
                AccountManager -> AccountEntity: getLastUnsuccessfulAuthentication()
                return time of last unsuccessful authentication attempt
                AccountManager -> AccountEntity: getLastSuccessfulAuthentication()
                return time of last successful authentication attempt
               AccountManager -> LastAuthenticationTimes**: <<create>>
            return lastAuthenticationTimes
            end
            AuthenticationEndpoint -> LastAuthenticationTimes: getLastUnsuccessfulAuthenticationTime()
            return time of last unsuccessful authentication attempt
            AuthenticationEndpoint -> LastAuthenticationTimes: getLastSuccessfulAuthenticationTime()
            return time of last successful authentication attempt
               AuthenticationEndpoint -> LoginResponseDto**: <<create>>
            group RW, read committed
             AuthenticationEndpoint -> AccountManager: handleSuccessfulAuthentication(principal.getName(), ip,\n language, isAdmin = callerGroups.contains(Administrator))
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with account
                AccountManager -> AccountEntity: setLastSuccessfulAuthentication(LocalDateTime.now())
                return success
                AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(0)
                return success
                AccountManager -> AccountEntity: setLastUsedIpAddress(ip)
                return success
                AccountManager -> AccountFacade: edit(account)
                return success
                group opt [isAdmin == true]
                AccountManager -> EmailCreator: getAdminAuthenticationEmail(lang, account.getEmail(), ip)
                return email
                AccountManager -> EmailSender: sendEmail(email)
                return success
                end
            return success
            end
            AuthenticationEndpoint -> JWTTokenUtils: newCookie(principal.getName(), callerGroups)
            return cookie
        return status code 200,\nloginResponseDto,\ncookie with JWT Token
    return Redirect to logged user view
else login belongs to existing account but password is incorrect\n that's first or second failed authentication attempt in a row
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest, login, language)
                AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
                AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
                return credentialValidationResult
                AuthenticationEndpoint -> CredentialValidationResult: getStatus()
                return CredentialValidationResult.Status.INVALID
            group RW, read committed
            AuthenticationEndpoint -> AccountManager: handleUnsuccessfulAuthentication(login)
                AccountManager -> AccountFacade: findByLogin(login)
                return optional with account
                AccountManager -> AccountEntity: setLastUnsuccessfulAuthentication(LocalDateTime.now())
                return success
                AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(\naccount.getUnsuccessfulAuthenticationCount + 1)
                return success
                AccountManager -> AccountFacade: edit(account)
                return success
            return success
            end
            group RW, read committed
                AuthenticationEndpoint -> AccountManager: lockAccountAfterFailedAuthentication(login, language)
                    AccountManager -> AccountFacade: findByLogin(login)
                    return optional with account
                        AccountManager -> AccountEntity: getUnsuccessfulAuthenticationCount()
                        return count < 3
                return false
            end
    return status code 401\nIncorrect login or password
return Incorrect login or password
else login belongs to existing account but password is incorrect\n that's third or subsequent failed authentication attempt in a row
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest, login, language)
                AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
                AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
                return credentialValidationResult
                AuthenticationEndpoint -> CredentialValidationResult: getStatus()
                return CredentialValidationResult.Status.INVALID
            group RW, read committed
                        AuthenticationEndpoint -> AccountManager: handleUnsuccessfulAuthentication(login)
                            AccountManager -> AccountFacade: findByLogin(login)
                            return optional with account
                            AccountManager -> AccountEntity: setLastUnsuccessfulAuthentication(LocalDateTime.now())
                            return success
                            AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(\naccount.getUnsuccessfulAuthenticationCount + 1)
                            return success
                            AccountManager -> AccountFacade: edit(account)
                            return success
                        return success
            end
            group RW, read committed
                AuthenticationEndpoint -> AccountManager: lockAccountAfterFailedAuthentication(login, language)
                    AccountManager -> AccountFacade: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getUnsuccessfulAuthenticationCount()
                    return count >= 3
                    AccountManager -> AccountEntity: isActive()
                    return true
                    AccountManager -> AdminFacade: countActive(true)
                    return number of active admins
                    group opt [numberOfActiveAdmins == 1]
                        AccountManager -> AccountEntity: getAccessLevels()
                        return list of account access levels
                    end
                    AccountManager -> AccountEntity: setActive(false)
                    return success
                    AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(0)
                    return success
                    AccountManager -> AccountFacade: edit(account)
                    return success
                    AccountManager -> EmailCreator: getLockAccountEmail(lang, account.getEmail())
                    return email
                    AccountManager -> EmailSender: sendEmail(email)
                    return success
                return true
            end
    return status code 401\nAccount was locked
return Incorrect login or password, Account was locked message
else login belongs to existing account but password is incorrect\n that's third or subsequent failed authentication attempt in a row\n but account is already locked
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest, login, language)
                AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
                AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
                return credentialValidationResult
                AuthenticationEndpoint -> CredentialValidationResult: getStatus()
                return CredentialValidationResult.Status.INVALID
            group RW, read committed
                        AuthenticationEndpoint -> AccountManager: handleUnsuccessfulAuthentication(login)
                            AccountManager -> AccountFacade: findByLogin(login)
                            return optional with account
                            AccountManager -> AccountEntity: setLastUnsuccessfulAuthentication(LocalDateTime.now())
                            return success
                            AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(\naccount.getUnsuccessfulAuthenticationCount + 1)
                            return success
                            AccountManager -> AccountFacade: edit(account)
                            return success
                        return success
            end
            group RW, read committed
                AuthenticationEndpoint -> AccountManager: lockAccountAfterFailedAuthentication(login, language)
                    AccountManager -> AccountFacade: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getUnsuccessfulAuthenticationCount()
                    return count >= 3
                    AccountManager -> AccountEntity: isActive()
                    return false
                return false
            end
    return status code 401\nIncorrect login or password
return Incorrect login or password, Account was locked message
else login belongs to existing account but password is incorrect\n that's third or subsequent failed authentication attempt in a row\n,but it is last admin account
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest, login, language)
                AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
                AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
                return credentialValidationResult
                AuthenticationEndpoint -> CredentialValidationResult: getStatus()
                return CredentialValidationResult.Status.INVALID
            group RW, read committed
                        AuthenticationEndpoint -> AccountManager: handleUnsuccessfulAuthentication(login)
                            AccountManager -> AccountFacade: findByLogin(login)
                            return optional with account
                            AccountManager -> AccountEntity: setLastUnsuccessfulAuthentication(LocalDateTime.now())
                            return success
                            AccountManager -> AccountEntity: setUnsuccessfulAuthenticationCount(\naccount.getUnsuccessfulAuthenticationCount + 1)
                            return success
                            AccountManager -> AccountFacade: edit(account)
                            return success
                        return success
            end
            group RW, read committed
                AuthenticationEndpoint -> AccountManager: lockAccountAfterFailedAuthentication(login, language)
                    AccountManager -> AccountFacade: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: getUnsuccessfulAuthenticationCount()
                    return count >= 3
                    AccountManager -> AccountEntity: isActive()
                    return true
                    AccountManager -> AdminFacade: countActive(true)
                    return number of active admins
                    group opt [numberOfActiveAdmins == 1]
                        AccountManager -> AccountEntity: getAccessLevels()
                        return list of account access levels with admin
                    end
                return Attempt to lock last admin
            end
    return status code 401\nIncorrect login or password
return Incorrect login or password
else account with such login doesn't exist
Guest -> GUI: login and password entered \n'log in' button clicked
    GUI -> AuthenticationEndpoint: login(httpServletRequest, login, language)
                AuthenticationEndpoint -> UsernamePasswordCredential**: <<create>>
                AuthenticationEndpoint -> IdentityStoreHandler: validate(usernamePasswordCredential)
                return credentialValidationResult
                AuthenticationEndpoint -> CredentialValidationResult: getStatus()
                return CredentialValidationResult.Status.INVALID
        group RW, read committed
        AuthenticationEndpoint -> AccountManager: handleUnsuccessfulAuthentication(login, ip, language)
            AccountManager -> AccountFacade: findByLogin(login)
            return empty optional
        return Account does not exist
        end
    return status code 401, Incorrect login or password
return Incorrect login or password
end
@enduml