@startuml
title
MOK.5 Zablokuj konto
end title

autoactivate on
actor Admin
boundary AccountsList
participant AccountEndpoint
participant SendingEmailEndpoint
participant AccountManager
control AccountFacadeReadCommitted
control AdminFacadeReadCommitted
entity AccountEntity
alt account is already unlocked
autonumber
    Admin -> AccountsList: 'lock' button clicked
    activate AccountsList
        AccountsList -> AccountEndpoint: lockAccount(login)
            AccountEndpoint -> AccountManager: lockAccount(login)
                 group RW, read committed
                    AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                    return optional with account
                    AccountManager -> AccountEntity: isVerified()
                    return true
                    AccountManager -> AccountEntity: isActive()
                    return true
                    AccountManager -> AdminFacadeReadCommitted: countActive(true)
                    return number of active admins
                    opt There is only one active administrator in the system
                        AccountManager -> AccountEntity: getAccessLevels()
                        return list of account access levels
                    end
                    AccountManager -> AccountEntity: setActive(false)
                    return success

                    AccountManager -> AccountFacadeReadCommitted: edit(account)
                    return success
                end
            return success
        return status code 200
    return 'success' message
    AccountsList -> SendingEmailEndpoint: activityChangedNotification(language, isBlocking=true, email)
            SendingEmailEndpoint -> AccountManager: isVerifiedAccountWithEmail(email)
                AccountManager -> AccountFacadeReadCommitted: findByEmail(email)
                return optional with account
                AccountManager -> AccountEntity: isVerified()
                return true
            return true
            SendingEmailEndpoint -> EmailCreator: getLockAccountEmail(language, email)
            return emailMessage
            SendingEmailEndpoint -> EmailSender: sendEmail(emailMessage)
            return
    return status code 200
    deactivate AccountsList
else account does not exist
autonumber
     Admin -> AccountsList: 'lock' button clicked
         AccountsList -> AccountEndpoint: lockAccount(login)
             AccountEndpoint -> AccountManager: lockAccount(login)
                group RW, read committed
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return empty optional
                end
             return account does not exist
         return status code 400
     return 'error' message
else account is not verified
autonumber
     Admin -> AccountsList: 'lock' button clicked
         AccountsList -> AccountEndpoint: lockAccount(login)
             AccountEndpoint -> AccountManager: lockAccount(login)
                 group RW, read committed
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return false
                 end
             return account is not verified
         return status code 400
     return 'error' message
else account is already locked
autonumber
     Admin -> AccountsList: 'lock' button clicked
         AccountsList -> AccountEndpoint: lockAccount(login)
             AccountEndpoint -> AccountManager: lockAccount(login)
                 group RW, read committed
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return true
                     AccountManager -> AccountEntity: isActive()
                     return false
                 end
             return account is already locked
         return status code 400
     return 'error' message
else attempt to lock last admin account
autonumber
     Admin -> AccountsList: 'lock' button clicked
         AccountsList -> AccountEndpoint: lockAccount(login)
             AccountEndpoint -> AccountManager: lockAccount(login)
                 group RW, read committed
                     AccountManager -> AccountFacadeReadCommitted: findByLogin(login)
                     return optional with account
                     AccountManager -> AccountEntity: isVerified()
                     return true
                     AccountManager -> AccountEntity: isActive()
                     return true
                     AccountManager -> AdminFacadeReadCommitted: countActive(true)
                     return number 1
                     AccountManager -> AccountEntity: getAccessLevels()
                     return list of account access levels with admin level
                 end
             return attempt to lock last admin account
         return status code 400
     return 'error' message
end
@enduml
