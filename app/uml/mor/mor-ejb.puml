@startuml

skinparam linetype ortho
left to right direction

title __MOR Class Diagram__\n


  interface javax.ejb.SessionSynchronization
  namespace pl.lodz.p.it.ssbd2020.facades {
    interface pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations << Local >>
     {
        {abstract} + count(): int throws AppException
        {abstract} + create(obj: T) throws AppException
        {abstract} + edit(obj: T) throws AppException
        {abstract} + find(id: Object): Optional<T> throws AppException
        {abstract} + findAll(): List<T> throws AppException
        {abstract} + remove(obj: T) throws AppException
    }
  }

  namespace pl.lodz.p.it.ssbd2020.facades {
    abstract class pl.lodz.p.it.ssbd2020.facades.AbstractFacade {
        {static} + CONSTRAINT_UNIQUE_CARD_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_EMAIL : String
        {static} + CONSTRAINT_UNIQUE_LOGIN : String
        {static} + CONSTRAINT_UNIQUE_LOGIN_ACCESS_LEVEL : String
        {static} + CONSTRAINT_UNIQUE_PHONE_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_TOKEN : String
        {static} + CONSTRAINT_UNIQUE_WORK_PHONE_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_RESERVATION_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_ALLEY_NAME : String
        {static} + CONSTRAINT_UNIQUE_WEAPON_SERIAL_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_OPINION_NUMBER : String
        {static} + CONSTRAINT_UNIQUE_CUSTOMER_AND_MODEL : String
        - entityClass : Class<T>
        + AbstractFacade()
        + count(entity: T): int throws AppException
        + create(): void throws AppException
        + edit(entity: T): void throws AppException
        + find(id: Object): Optional<T> throws AppException
        + findAll(): List<T> throws AppException
        + remove(entity: T): void throws AppException
        {abstract} # getEntityManager(): EntityManager
    }
  }

  namespace pl.lodz.p.it.ssbd2020.utils.manager {
    interface pl.lodz.p.it.ssbd2020.utils.manager.Manager {
        + afterBegin(): void throws EJBException
        + afterCompletion(comitted: boolean): void throws EJBException
        + beforeCompletion(): void throws EJBException
        {abstract} + getLastTransactionId(): String
        {abstract} + isLastTransactionRollback(): boolean
        {abstract} + setLastTransactionCommitted(comitted: boolean): void
        {abstract} + setLastTransactionId(id: String): void
        {abstract} + getCurrentUser() : String
    }
  }

'interface facade
'#######################################################################################

  namespace pl.lodz.p.it.ssbd2020.mor.facades.interfaces {

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyDifficultyLevelFacadeReadCommittedLocal << Local >>
     {
      {abstract} + findByName(name: String): Optional<AlleyDifficultyLevelEntity>
    }

      interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.OpinionFacadeReadCommittedLocal << Local >>
       {
        {abstract} + findByWeaponModelName(weaponModelName: String): List<OpinionEntity>
        {abstract} + findByWeaponModelAndCustomerLogin(weaponModelName: String, login: String): Optional<OpinionEntity>
      }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyFacadeReadCommittedLocal << Local >>
     {
      {abstract} + findByActive(active: boolean): List<AlleyEntity> throws AppException
      {abstract} + findByName(name: String): Optional<AlleyEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.CustomerFacadeReadCommittedLocal << Local >>
     {
       {abstract} + findByLogin(login : String) : Optional<CustomerEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.ReservationFacadeReadCommittedLocal << Local >>
     {
      {abstract} + findByCustomer(login: String, getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
      {abstract} + findByReservationNumber(reservationNumber: long): Optional<ReservationEntity> throws AppException
      {abstract} + findAll(getCanceled: boolean, getPast: boolean) : List<ReservationEntity> throws AppException
      {abstract} + findConflictReservationsByWeaponModel(startDate: LocalDateTime, endDate: LocalDateTime, weaponModelName: String, alleyName: String) : List<ReservationEntity> throws AppException
      {abstract} + findConflictReservationsByWeapon(startDate: LocalDateTime, endDate: LocalDateTime, weaponSerialNumber: String, alleyName: String) : List<ReservationEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponCategoryFacadeReadCommittedLocal << Local >>
     {
        {abstract} + findByName(name : String) : Optional<WeaponCategoryEntity> throws AppException
     }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponFacadeReadCommittedLocal << Local >>
     {
      {abstract} + findByActive(active: boolean): List<WeaponEntity> throws AppException
      {abstract} + findByActiveAndWeaponModelName(active: boolean, weaponModelName: String): List<WeaponEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal << Local >>
     {
      {abstract} + findByActive(active: boolean): List<WeaponModelEntity> throws AppException
      {abstract} + findByName(name: String): Optional<WeaponModelEntity> throws AppException
    }
  }

'facade
'#######################################################################################

  namespace pl.lodz.p.it.ssbd2020.mor.facades {

    class pl.lodz.p.it.ssbd2020.mor.facades.AlleyDifficultyLevelFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + AlleyDifficultyLevelFacade()
        + findAll(): List<AlleyDifficultyLevelEntity> throws AppException
        + findByName(): Optional<AlleyDifficultyLevelEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.AlleyFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + AlleyFacade()
        + create(entity: AlleyEntity): void throws AppException
        + edit(entity: AlleyEntity): void throws AppException
        + findAll(): List<AlleyEntity> throws AppException
        + find(id: Object): Optional<AlleyEntity> throws AppException
        + findByActive(active: boolean): List<AlleyEntity> throws AppException
        + findByName(name: String): Optional<AlleyEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.CustomerFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + CustomerFacade()
        + create(entity: CustomerEntity): void throws AppException
        + edit(entity: CustomerEntity): void throws AppException
        + remove(entity: CustomerEntity): void throws AppException
        + findByLogin(login: String): Optional<CustomerEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.OpinionFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + OpinionFacade()
        + create(entity: OpinionEntity): void throws AppException
        + findAll(): List<OpinionEntity> throws AppException
        + find(id: Object): Optional<OpinionEntity> throws AppException
        + findByOpinionNumber(opinionNumber: long): List<OpinionEntity> throws AppException
        + findByWeaponModelAndCustomerLogin(weaponModelName: String, login: String): Optional<OpinionEntity> throws AppException
        + edit(entity: OpinionEntity) : void throws AppException
        + remove(entity: OpinionEntity): void throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.ReservationFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + ReservationFacade()
        + create(entity: ReservationEntity): void throws AppException
        + edit(entity: ReservationEntity): void throws AppException
        + findByCustomer(login: String, getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
        + findByReservationNumber(reservationNumber: long): Optional<ReservationEntity> throws AppException
        + findAll(getCanceled: boolean, getPast: boolean) : List<ReservationEntity> throws AppException
        + findConflictReservationsByWeaponModel(startDate: LocalDateTime, endDate: LocalDateTime, weaponModelName: String, alleyName: String) : List<ReservationEntity> throws AppException
        + findConflictReservationsByWeapon(startDate: LocalDateTime, endDate: LocalDateTime, weaponSerialNumber: String, alleyName: String) : List<ReservationEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.WeaponCategoryFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + WeaponCategoryFacade()
        + findAll(): List<WeaponCategoryEntity> throws AppException
        + findByName(name: String): Optional<WeaponCategoryEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.WeaponFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + WeaponFacade()
        + create(entity: WeaponEntity): void throws AppException
        + edit(entity: WeaponEntity): void throws AppException
        + findByActive(active: boolean): List<WeaponEntity> throws AppException
        + findBySerialNumber(serialNumber: String): Optional<WeaponEntity> throws AppException
        + findByActiveAndWeaponModelName(active: boolean, weaponModelName: String): List<WeaponEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.WeaponModelFacadeReadCommitted << Stateless >> {
        - em : EntityManager
        + WeaponModelFacade()
        + find(id: Object): Optional<WeaponModelEntity> throws AppException
        + create(entity: WeaponModelEntity): void throws AppException
        + edit(entity: WeaponModelEntity): void throws AppException
        + findByActive(active: boolean): List<WeaponModelEntity> throws AppException
        + findByName(name: String): Optional<WeaponModelEntity> throws AppException
        # getEntityManager(): EntityManager
    }
  }

'interface facade serializable
'#######################################################################################

    namespace pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces {

      interface pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponModelFacadeSerializableLocal << Local >>
      {
        {abstract} + findByName(name: String): Optional<WeaponModelEntity> throws AppException
      }

      interface pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.AlleyFacadeSerializableLocal << Local >>
      {
          {abstract} + findByName(name : String) : Optional<AlleyEntity> throws AppException
      }

      interface pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.CustomerFacadeSerializableLocal << Local >>
      {
          {abstract} + findByLogin(login : String) : Optional<CustomerEntity> throws AppException
      }

      interface pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.ReservationFacadeSerializableLocal << Local >>
      {
          {abstract} + findConflictReservationsByWeaponModel(startDate: LocalDateTime, endDate: LocalDateTime, weaponModelName: String, alleyName: String) throws AppException
          {abstract} + findConflictReservationsByWeapon(startDate: LocalDateTime, endDate: LocalDateTime, weaponSerialNumber: String, alleyName: String) throws AppException
      }

      interface pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponFacadeSerializableLocal << Local >>
      {
          {abstract} + findBySerialNumber(serialNumber: String): Optional<WeaponEntity> throws AppException
      }
    }

'facade serializable
'#######################################################################################

  namespace pl.lodz.p.it.ssbd2020.mor.facades.serializable {
    class pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponModelFacadeSerializable << Stateless >> {
        - em : EntityManager
        + WeaponModelFacade()
        + create(entity: WeaponModelEntity): void throws AppException
        + edit(entity: WeaponModelEntity): void throws AppException
        + findByName(name: String): Optional<WeaponModelEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.serializable.CustomerFacadeSerializable << Stateless >> {
        - em : EntityManager
        + CustomerFacade()
        + create(entity: CustomerEntity): void throws AppException
        + edit(entity: CustomerEntity): void throws AppException
        + findByLogin(login: String): Optional<CustomerEntity> throws AppException
        + remove(entity: CustomerEntity): void throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.serializable.AlleyFacadeSerializable << Stateless >> {
        - em : EntityManager
        + AlleyFacade()
        + findAll(): List<AlleyEntity>
        + create(entity: AlleyEntity): void throws AppException
        + edit(entity: AlleyEntity): void throws AppException
        + findByName(name: String): Optional<WeaponModelEntity> throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.serializable.ReservationFacadeSerializable << Stateless >> {
        - em : EntityManager
        + OpinionFacade()
        + create(entity: ReservationEntity): void throws AppException
        + edit(entity: ReservationEntity) : void throws AppException
        + findConflictReservationsByWeaponModel(startDate: LocalDateTime, endDate: LocalDateTime, weaponModelName: String, alleyName: String) throws AppException
        + findConflictReservationsByWeapon(startDate: LocalDateTime, endDate: LocalDateTime, weaponSerialNumber: String, alleyName: String) throws AppException
        # getEntityManager(): EntityManager
    }

    class pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponFacadeSerializable << Stateless >> {
        - em : EntityManager
        + OpinionFacade()
        + create(entity: WeaponEntity): void throws AppException
        + edit(entity: WeaponEntity) : void throws AppException
        + findBySerialNumber(serialNumber: String): Optional<WeaponEntity> throws AppException
        # getEntityManager(): EntityManager
    }
  }

'interface manager
'#######################################################################################

  namespace pl.lodz.p.it.ssbd2020.mor.managers.interfaces {
    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyDifficultyLevelManagerLocal << Local >>
     {
      {abstract} + getAllAlleyDifficultyLevels(): List<AlleyDifficultyLevelEntity> throws AppException
      {abstract} + findByName(name: String): AlleyDifficultyLevelEntity throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyManagerLocal << Local >>
     {
      {abstract} + addAlley(entity: AlleyEntity, alleyDifficultyLevelName: String): void throws AppException
      {abstract} + removeAlley(alleyName: String): void throws AppException
      {abstract} + editAlleyDetails(name: String): AlleyEntity throws AppException
      {abstract} + getAllActiveAlleys(): List<AlleyEntity> throws AppException
      {abstract} + getAlleyDetails(entity: AlleyEntity): void throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.OpinionManagerLocal << Local >>
     {
      {abstract} + addOpinion(opinion: OpinionEntity): void throws AppException
      {abstract} + removeOpinion(opinionNumber: Long): void throws AppException
      {abstract} + editOpinion(opinion: OpinionEntity): void throws AppException
      {abstract} + getAllOpinionsForWeaponModel(name: String): List<OpinionEntity> throws AppException
      {abstract} + getOwnOpinionForWeaponModel(name: String): OpinionEntity throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.ReservationManagerLocal << Local >>
     {
      {abstract} + getAllCustomersReservations(login: String, getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
      {abstract} + getAllReservations(getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
      {abstract} + getOwnReservation(login: String, reservationNumber: Long): ReservationEntity throws AppException
      {abstract} + getReservation(reservationNumber: Long): ReservationEntity throws AppException
      {abstract} + makeReservation(entity: ReservationEntity, alleyName: String, weaponModelName: String, language: String): void throws AppException
      {abstract} + cancelReservation(reservationNumber: long, language: String): void throws AppException
      {abstract} + cancelReservation(reservationNumber: long, login: String, language: String): void throws AppException
      {abstract} + updateOwnReservation(login: String, reservationEntity: ReservationEntity, language: String): void throws AppException
      {abstract} + updateReservation(entity: ReservationEntity, language: String): void throws AppException
      {abstract} + getConflictReservationsByWeaponModel(date: LocalDateTime, alleyName: String, weaponModelName: String, excludedReservationNumber: Long): List<ReservationEntity> throws AppException
      {abstract} + getConflictReservationsByWeaponModel(date: LocalDateTime, alleyName: String, weaponSerialNumber: String, excludedReservationNumber: Long): List<ReservationEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponCategoryManagerLocal << Local >>
     {
      {abstract} + getAllActiveWeaponCategories(): List<WeaponCategoryEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponManagerLocal << Local >>
     {
      {abstract} + createWeapon(weaponEntity: WeaponEntity, weaponModelName: String) throws AppException
      {abstract} + getAllActiveWeapons(): List<WeaponEntity> throws AppException
      {abstract} + removeWeapon(serialNumber: String): void throws AppException
      {abstract} + getAllActiveWeaponsByModelName(modelName: String): List<WeaponEntity> throws AppException
    }

    interface pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponModelManagerLocal << Local >>
     {
      {abstract} + addWeaponModel(entity: WeaponModelEntity): void throws AppException
      {abstract} + editWeaponModel(entity: WeaponModelEntity): void throws AppException
      {abstract} + getAllActiveWeaponModels(): List<WeaponModelEntity> throws AppException
      {abstract} + getWeaponModel(name: String): WeaponModelEntity throws AppException
      {abstract} + removeWeaponModel(name: String): void throws AppException
      {abstract} + getAllActiveWeaponModelsWithActiveWeapons(): List<WeaponModelEntity> throws AppException
    }
  }

'manager
'#######################################################################################

  namespace pl.lodz.p.it.ssbd2020.mor.managers {
    class pl.lodz.p.it.ssbd2020.mor.managers.AlleyDifficultyLevelManager << Stateful >> {
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        - alleyDifficultyLevelFacadeReadCommitted: AlleyDifficultyLevelFacadeReadCommittedLocal
        + getCurrentUser(): String
        + getAllAlleyDifficultyLevels(): List<AlleyDifficultyLevelEntity> throws AppException
        + getLastTransactionId(): String
        + isLastTransactionRollback(): boolean
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
        + findByName(name: String): AlleyDifficultyLevelEntity throws AppException
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.AlleyManager << Stateful >> {
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        - alleyFacade: AlleyFacadeLocal
        - alleyFacadeSerializable: AlleyFacadeSerializableLocal
        - alleyDifficultyLevelFacadeReadCommitted: AlleyDifficultyLevelFacadeReadCommittedLocal
        + getCurrentUser() : String
        + addAlley(entity: AlleyEntity, alleyDifficultyLevelName: String): void throws AppException
        + removeAlley(name: String): void throws AppException
        + editAlleyDetails(entity: AlleyEntity): void throws AppException
        + getAllActiveAlleys(): List<AlleyEntity> throws AppException
        + getAlleyDetails(): AlleyEntity throws AppException
        + getLastTransactionId(): String
        + isLastTransactionRollback(): boolean
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.OpinionManager << Stateful >> {
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        - opinionFacadeReadCommittedLocal: OpinionFacadeReadCommittedLocal
        - weaponModelFacadeReadCommitted: WeaponModelFacadeReadCommittedLocal
        - customerFacadeReadCommitted: CustomerFacadeReadCommittedLocal
        + getCurrentUser(): String
        + addOpinion(opinion: OpinionEntity): void throws AppException
        + removeOpinion(opinionNumber: Long): void throws AppException
        + editOpinion(opinion: OpinionEntity): void throws AppException
        + getAllOpinionsForWeaponModel(name: String): List<OpinionEntity> throws AppException
        + getOwnOpinionForWeaponModel(name: String): OpinionEntity throws AppException
        + getLastTransactionId(): String
        + isLastTransactionRollback(): boolean
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager << Stateful >> {
        - maxReservationDuration: int
        - openingHour: int
        - closingHour: int
        - servletContext: ServletContext
        - reservationFacadeReadCommitted: ReservationFacadeReadCommittedLocal
        - reservationFacadeSerializable: ReservationFacadeSerializableLocal
        - alleyFacadeSerializable: AlleyFacadeSerializableLocal
        - weaponModelFacadeReadCommitted: WeaponModelFacadeReadCommittedLocal
        - weaponModelFacadeSerializable: WeaponModelFacadeSerializableLocal
        - customerFacadeSerializable: CustomerFacadeSerializableLocal
        - weaponFacadeSerializable: WeaponFacadeSerializableLocal
        - emailSender: EmailSender
        - emailCreator: EmailCreator
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        + init(): void
        + getCurrentUser(): String
        + getAllCustomersReservations(login: String, getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
        + getAllReservations(getCanceled: boolean, getPast: boolean): List<ReservationEntity> throws AppException
        + getLastTransactionId(): String
        + getOwnReservation(login: String, reservationNumber: Long): ReservationEntity throws AppException
        + getReservation(reservationNumber: Long): ReservationEntity throws AppException
        + isLastTransactionRollback(): boolean
        + makeReservation(entity: ReservationEntity, alleyName: String, weaponModelName: String, language: String): void throws AppException
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
        + updateOwnReservation(login: String, entity: ReservationEntity, language: String): void throws AppException
        + updateReservation(targetEntity: ReservationEntity, language: String): void throws AppException
        + cancelReservation(reservationNumber: long, language: String): void throws AppException
        + cancelReservation(reservationNumber: long, login: String, language: String) throws AppException
        + getConflictReservationsByWeaponModel(date: LocalDateTime, alleyName: String, weaponModelName: String, excludedReservationNumber: Long): List<ReservationEntity> throws AppException
        + getConflictReservationsByWeapon(date: LocalDateTime, alleyName: String, weaponSerialNumber: String, excludedReservationNumber: long): List<ReservationEntity> throws AppException
        - addReservation(entity: ReservationEntity, customerEntity: CustomerEntity, alleyEntity: AlleyEntity, weaponToReserve: WeaponEntity): void throws AppException
        - checkReservationDuration(startDate: LocalDateTime, endDate: LocalDateTime): void throws AppException
        - checkOpeningHours(startDate: LocalDateTime, endDate: LocalDateTime): void throws AppException
        - cancelReservation(entity: ReservationEntity): void throws AppException
        - checkReservationEditability(originalEntity: ReservationEntity): void throws AppException
        - validateTargetReservationPeriod(targetEntity: ReservationEntity) throws AppException
        - getActiveWeaponBySerialNumber(serialNumber: String): WeaponEntity throws AppException
        - getActiveAlleyByName(alleyName: String): AlleyEntity throws AppException
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.WeaponCategoryManager << Stateful >> {
        - weaponCategoryFacade: WeaponCategoryFacadeReadCommittedLocal
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        + getCurrentUser() : String
        + getAllWeaponCategories(): List<WeaponCategoryEntity> throws AppException
        + getLastTransactionId(): String
        + isLastTransactionRollback(): boolean
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.WeaponManager << Stateful >> {
        - weaponFacadeReadCommitted: WeaponFacadeReadCommittedLocal
        - weaponFacadeSerializable: WeaponFacadeSerializableLocal
        - weaponModelFacadeSerializable: WeaponModelFacadeSerializableLocal
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        + getCurrentUser() : String
        + createWeapon(weaponEntity: WeaponEntity, weaponModelName: String): void throws AppException
        + getAllActiveWeapons(): List<WeaponEntity> throws AppException
        + getAllActiveWeaponsByModelName(modelName: String): List<WeaponEntity> throws AppException
        + getLastTransactionId(): String
        + isLastTransactionRollback(): boolean
        + removeWeapon(serialNumber: String): void throws AppException
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
    }

    class pl.lodz.p.it.ssbd2020.mor.managers.WeaponModelManager << Stateful >> {
        - weaponModelFacadeReadCommitted: WeaponModelFacadeReadCommittedLocal
        - weaponCategoryFacadeReadCommitted: WeaponCategoryFacadeReadCommittedLocal
        - isLastTransactionCommitted : boolean
        - lastTransactionId : String
        - securityContext : SecurityContext
        + addWeaponModel(entity: WeaponModelEntity): void throws AppException
        + editWeaponModel(entity: WeaponModelEntity): void throws AppException
        + getAllActiveWeaponModels(): List<WeaponModelEntity> throws AppException
        + getAllActiveWeaponModelsWithActiveWeapons(): List<WeaponModelEntity> throws AppException
        + getLastTransactionId(): String
        + getWeaponModel(name: String): WeaponModelEntity throws AppException
        + isLastTransactionRollback(): boolean
        + removeWeaponModel(name: String): void throws AppException
        + setLastTransactionCommitted(committed: boolean): void
        + setLastTransactionId(id: String): void
        + getCurrentUser(): String
        - removeWeapon(weaponEntity: WeaponEntity): void throws AppException

    }
  }

'#######################################################################################

  pl.lodz.p.it.ssbd2020.facades.AbstractFacade ..|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations

  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyDifficultyLevelManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.OpinionManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.ReservationManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponCategoryManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager
  pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponModelManagerLocal -right-|> pl.lodz.p.it.ssbd2020.utils.manager.Manager

  pl.lodz.p.it.ssbd2020.utils.manager.Manager --|> javax.ejb.SessionSynchronization

  pl.lodz.p.it.ssbd2020.mor.facades.AlleyDifficultyLevelFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyDifficultyLevelFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.AlleyFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.CustomerFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.CustomerFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.OpinionFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.OpinionFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.ReservationFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.ReservationFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponCategoryFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponCategoryFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponModelFacadeReadCommitted .up.|> pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal

  pl.lodz.p.it.ssbd2020.mor.facades.serializable.AlleyFacadeSerializable .up.|> pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.AlleyFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.CustomerFacadeSerializable .up.|> pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.CustomerFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponModelFacadeSerializable .up.|> pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponModelFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponFacadeSerializable .up.|> pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.ReservationFacadeSerializable .up.|> pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.ReservationFacadeSerializableLocal

  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyDifficultyLevelFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.CustomerFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.ReservationFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponCategoryFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.AlleyFacadeSerializableLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponModelFacadeSerializableLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.CustomerFacadeSerializableLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.ReservationFacadeSerializableLocal -down-|> pl.lodz.p.it.ssbd2020.facades.BasicFacadeOperations

  pl.lodz.p.it.ssbd2020.mor.facades.AlleyDifficultyLevelFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.AlleyFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.CustomerFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.ReservationFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponCategoryFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.WeaponModelFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.OpinionFacadeReadCommitted -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade

  pl.lodz.p.it.ssbd2020.mor.facades.serializable.AlleyFacadeSerializable -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.CustomerFacadeSerializable -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponModelFacadeSerializable -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.ReservationFacadeSerializable -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade
  pl.lodz.p.it.ssbd2020.mor.facades.serializable.WeaponFacadeSerializable -down-|> pl.lodz.p.it.ssbd2020.facades.AbstractFacade

  pl.lodz.p.it.ssbd2020.mor.managers.AlleyDifficultyLevelManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyDifficultyLevelManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.AlleyManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.AlleyManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.OpinionManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.OpinionManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.ReservationManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponCategoryManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponCategoryManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponManagerLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponModelManager .up.|> pl.lodz.p.it.ssbd2020.mor.managers.interfaces.WeaponModelManagerLocal

  pl.lodz.p.it.ssbd2020.mor.managers.AlleyDifficultyLevelManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyDifficultyLevelFacadeReadCommittedLocal

  pl.lodz.p.it.ssbd2020.mor.managers.AlleyManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.AlleyManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.AlleyFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.AlleyManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.AlleyDifficultyLevelFacadeReadCommittedLocal

  pl.lodz.p.it.ssbd2020.mor.managers.OpinionManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.OpinionFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.OpinionManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.OpinionManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.CustomerFacadeReadCommittedLocal

  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.ReservationFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.ReservationFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.AlleyFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponModelFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.CustomerFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.ReservationManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponFacadeSerializableLocal

  pl.lodz.p.it.ssbd2020.mor.managers.WeaponCategoryManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponCategoryFacadeReadCommittedLocal

  pl.lodz.p.it.ssbd2020.mor.managers.WeaponManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponFacadeSerializableLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponManager o--- pl.lodz.p.it.ssbd2020.mor.facades.serializable.interfaces.WeaponModelFacadeSerializableLocal

  pl.lodz.p.it.ssbd2020.mor.managers.WeaponModelManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponModelFacadeReadCommittedLocal
  pl.lodz.p.it.ssbd2020.mor.managers.WeaponModelManager o--- pl.lodz.p.it.ssbd2020.mor.facades.interfaces.WeaponCategoryFacadeReadCommittedLocal

@enduml
