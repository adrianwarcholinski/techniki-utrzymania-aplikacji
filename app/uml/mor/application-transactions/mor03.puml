@startuml
title MOR.3 Odwołaj swoją rezerwację
autoactivate on
participant ReservationEndpoint
participant "ReservationManager\nTransactionAttribute.REQUIRES_NEW" as ReservationManager
control "ReservationFacadeReadCommitted\nTransactionAttribute.MANDATORY" as ReservationFacade
entity ReservationEntity
entity CustomerEntity
entity AccountEntity

alt reservation canceled properly
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login equal to given login parameter
                    ReservationManager -> ReservationManager: cancelReservation(reservation)
                        ReservationManager -> ReservationEntity: getEndDate()
                        return future date
                        ReservationManager -> ReservationEntity: getStartDate()
                        return future date
                        ReservationManager -> ReservationEntity: isActive()
                        return true
                        ReservationManager -> ReservationEntity: setActive(false)
                        return success
                        ReservationManager -> ReservationFacade: edit(reservation)
                        return success
                    return success
                    ReservationManager -> AccountEntity: getEmail()
                    return destinationEmail
                    ReservationManager -> AccountEntity: getReservationNumber()
                    return reservationNumber
                    ReservationManager -> EmailCreator: getCancelReservationEmail(finalLanguage, destinationEmail, reservationNumber)
                    return cancelReservationEmail
                    ReservationManager -> EmailSender: sendEmail(cancelReservationEmail)
                    return success
                return success
else reservation does not exist
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return empty optional
                return failed
else reservation does not belong to the user
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login not equal to given login parameter
                return failed
else reservation was finished in the past
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login equal to given login parameter
                    ReservationManager -> ReservationManager: cancelReservation(reservation)
                        ReservationManager -> ReservationEntity: getEndDate()
                        return past date
                    return failed
                return failed
else reservation is in progress
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login equal to given login parameter
                    ReservationManager -> ReservationManager: cancelReservation(reservation)
                        ReservationManager -> ReservationEntity: getEndDate()
                        return future date
                        ReservationManager -> ReservationEntity: getStartDate()
                        return past date
                    return failed
                return failed
else reservation is canceled
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login equal to given login parameter
                    ReservationManager -> ReservationManager: cancelReservation(reservation)
                        ReservationManager -> ReservationEntity: getEndDate()
                        return future date
                        ReservationManager -> ReservationEntity: getStartDate()
                        return future date
                        ReservationManager -> ReservationEntity: isActive()
                        return false
                    return failed
                return failed
else email sending error
autonumber
                ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, login, finalLanguage)
                    ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return login equal to given login parameter
                    ReservationManager -> ReservationManager: cancelReservation(reservation)
                        ReservationManager -> ReservationEntity: getEndDate()
                        return future date
                        ReservationManager -> ReservationEntity: getStartDate()
                        return future date
                        ReservationManager -> ReservationEntity: isActive()
                        return true
                        ReservationManager -> ReservationEntity: setActive(false)
                        return success
                        ReservationManager -> ReservationFacade: edit(reservation)
                        return success
                    return success
                    ReservationManager -> AccountEntity: getEmail()
                    return destinationEmail
                    ReservationManager -> AccountEntity: getReservationNumber()
                    return reservationNumber
                    ReservationManager -> EmailCreator: getCancelReservationEmail(finalLanguage, destinationEmail, reservationNumber)
                    return cancelReservationEmail
                    ReservationManager -> EmailSender: sendEmail(cancelReservationEmail)
                    return failed
                return failed
end


@enduml