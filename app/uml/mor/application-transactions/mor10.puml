@startuml

autoactivate on
participant OpinionEndpoint
participant "OpinionManager\nTransactionAttributeType.REQUIRES_NEW" as OpinionManager
participant SecurityContext
control "CustomerFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as CustomerFacadeReadCommitted
control "OpinionFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as OpinionFacadeReadCommitted
control "WeaponModelFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as WeaponModelFacadeReadCommitted
entity OpinionEntity
entity WeaponModelEntity

title MOR.10 Dodaj opiniÄ™ na temat modelu broni

alt correct
autonumber
    OpinionEndpoint -> OpinionManager: addOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> CustomerFacadeReadCommitted: findByLogin(principal.getName())
        return optional with customer
        OpinionManager -> WeaponModelFacadeReadCommitted: findByName(opinion.getWeaponModel().getName())
        return optional with weapon model
        OpinionManager -> WeaponModelEntity: getOpinions()
        return opinions about weapon model not containing opinion created by the customer
        OpinionManager -> WeaponModelEntity: setAverageRate(newAverageRate)
        return success
        OpinionManager -> OpinionFacadeReadCommitted: create(opinion)
        return success
        OpinionManager -> WeaponModelFacadeReadCommitted: edit(weaponModel)
        return success
    return success
else customer has already added opinion on this weapon model
autonumber
    OpinionEndpoint -> OpinionManager: addOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> CustomerFacadeReadCommitted: findByLogin(principal.getName())
        return optional with customer
        OpinionManager -> WeaponModelFacadeReadCommitted: findByName(opinion.getWeaponModel().getName())
        return weapon model
        OpinionManager -> WeaponModelEntity: getOpinions()
        return opinions about weapon model containing opinion created by the customer
    return customer has already added opinion on this weapon model
else weapon model does not exist
    OpinionEndpoint -> OpinionManager: addOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> CustomerFacadeReadCommitted: findByLogin(principal.getName())
        return optional with customer
        OpinionManager -> WeaponModelFacadeReadCommitted: findByName(opinion.getWeaponModel().getName())
        return empty optional
    return weapon model does not exist
else account does not exist
    OpinionEndpoint -> OpinionManager: addOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> CustomerFacadeReadCommitted: findByLogin(principal.getName())
        return empty optional
    return account does not exist
end
@enduml