@startuml

autoactivate on
participant OpinionEndpoint
participant "OpinionManager\nTransactionAttributeType.REQUIRES_NEW" as OpinionManager
participant SecurityContext
control "OpinionFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as OpinionFacadeReadCommitted
control "WeaponModelFacadeReadCommitted\nTransactionAttributeType.MANDATORY" as WeaponModelFacadeReadCommitted
entity OpinionEntity
entity WeaponModelEntity

title MOR.12 Edytuj opiniÄ™ na temat modelu broni

alt correct
autonumber
    OpinionEndpoint -> OpinionManager: getOwnOpinionForWeaponModel(weaponModelName)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> OpinionFacadeReadCommitted: findByWeaponModelAndCustomerLogin(weaponModelName, principal.getName())
        return own opinion for weapon model
    return own opinion for weapon model
    note right of OpinionEndpoint
    [...]
    end note
    OpinionEndpoint -> OpinionManager: editOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> OpinionFacadeReadCommitted: find(opinion.getId())
        return optional with current opinion
        OpinionManager -> OpinionEntity: getWeaponModel()
        return commented weapon model
        OpinionManager -> OpinionEntity: getCustomer()
        return customer with the same login
        OpinionManager -> WeaponModelEntity: setAverageRate(newAverageRate)
        return success
        OpinionManager -> OpinionEntity: copyNotChangedData(currentOpinion)
        return success
        OpinionManager -> OpinionFacadeReadCommitted: edit(opinion)
        return success
    return success
else opinion does not exist
autonumber
    OpinionEndpoint -> OpinionManager: getOwnOpinionForWeaponModel(weaponModelName)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> OpinionFacadeReadCommitted: findByWeaponModelAndCustomerLogin(weaponModelName, principal.getName())
        return empty optional
    return opinion does not exist
else attempt to edit another customer's opinion
autonumber
    OpinionEndpoint -> OpinionManager: getOwnOpinionForWeaponModel(weaponModelName)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> OpinionFacadeReadCommitted: findByWeaponModelAndCustomerLogin(weaponModelName, principal.getName())
        return own opinion for weapon model
    return own opinion for weapon model
    note right of OpinionEndpoint
    [...]
    end note
    OpinionEndpoint -> OpinionManager: editOpinion(opinion)
        OpinionManager -> SecurityContext: getCallerPrincipal()
        return principal
        OpinionManager -> OpinionFacadeReadCommitted: find(opinion.getId())
        return optional with current opinion
        OpinionManager -> OpinionEntity: getWeaponModel()
        return commented weapon model
        OpinionManager -> OpinionEntity: getCustomer()
        return customer with another login
    return attempt to edit another customer's opinion
end

@enduml