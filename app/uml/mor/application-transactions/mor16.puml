@startuml
title MOR.16 Edytuj szczegóły toru
autoactivate on
participant AlleyEndpoint
participant "AlleyManager\nTransactionAttribute.REQUIRES_NEW" as AlleyManager
participant "AlleyDifficultyLevelManager\nTransactionAttribute.REQUIRES_NEW" as  AlleyDifficultyLevelManager
control "AlleyFacadeReadCommitted\nTransactionAttribute.MANDATORY" as AlleyFacade
control "AlleyDifficultyLevelFacadeReadCommitted\nTransactionAttribute.MANDATORY" as AlleyDifficultyLevelFacade
entity AlleyEntity


alt change made successfully
autonumber
                    AlleyEndpoint -> AlleyManager: getAlleyDetails(name)
                        AlleyManager -> AlleyFacade: findByName(name)
                        return optional with alley
                        AlleyManager -> AlleyEntity: isActive()
                        return true
                    return alley

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: getAllAlleyDifficultyLevels()
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findAll()
                        return alleyDifficultyLevelsEntityList
                    return alleyDifficultyLevelsEntityList

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: findByName(difficultyLevelName)
                            AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findByName(difficultyLevelName)
                            return optional with difficultyLevel
                    return difficultyLevel

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyManager: editAlleyDetails(alleyEntity)
                            AlleyManager -> AlleyEntity: getId()
                            return alleyId
                            AlleyManager -> AlleyFacade: find(alleyId)
                            return optional with alley
                            AlleyManager -> AlleyEntity: isActive()
                            return true
                            AlleyManager -> AlleyEntity: copyNotChangedDataAlley(alley)
                            return success
                            AlleyManager -> AlleyFacade: edit(alleyEntity)
                            return success
                    return success
else  difficulty level does not exist
autonumber
                    AlleyEndpoint -> AlleyManager: getAlleyDetails(name)
                        AlleyManager -> AlleyFacade: findByName(name)
                        return optional with alley
                        AlleyManager -> AlleyEntity: isActive()
                        return true
                    return alley

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: getAllAlleyDifficultyLevels()
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findAll()
                        return alleyDifficultyLevelsEntityList
                    return alleyDifficultyLevelsEntityList

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: findByName(difficultyLevelName)
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findByName(difficultyLevelName)
                        return empty optional
                    return failed
else alley does not exist
autonumber
                    AlleyEndpoint -> AlleyManager: getAlleyDetails(name)
                        AlleyManager -> AlleyFacade: findByName(name)
                        return optional with alley
                        AlleyManager -> AlleyEntity: isActive()
                        return true
                    return alley

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: getAllAlleyDifficultyLevels()
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findAll()
                        return alleyDifficultyLevelsEntityList
                    return alleyDifficultyLevelsEntityList

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: findByName(difficultyLevelName)
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findByName(difficultyLevelName)
                        return optional with difficultyLevel
                    return difficultyLevel

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyManager: editAlleyDetails(alleyEntity)
                            AlleyManager -> AlleyEntity: getId()
                            return alleyId
                            AlleyManager -> AlleyFacade: find(alleyId)
                            return empty optional
                    return failed
else alley was removed
autonumber
                    AlleyEndpoint -> AlleyManager: getAlleyDetails(name)
                        AlleyManager -> AlleyFacade: findByName(name)
                        return optional with alley
                        AlleyManager -> AlleyEntity: isActive()
                        return true
                    return alley

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: getAllAlleyDifficultyLevels()
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findAll()
                        return alleyDifficultyLevelsEntityList
                    return alleyDifficultyLevelsEntityList

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: findByName(difficultyLevelName)
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findByName(difficultyLevelName)
                        return optional with difficultyLevel
                    return difficultyLevel

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyManager: editAlleyDetails(alleyEntity)
                            AlleyManager -> AlleyEntity: getId()
                            return alleyId
                            AlleyManager -> AlleyFacade: find(alleyId)
                            return optional with alley
                            AlleyManager -> AlleyEntity: isActive()
                            return false
                    return failed
else invalid form
autonumber
                    AlleyEndpoint -> AlleyManager: getAlleyDetails(name)
                        AlleyManager -> AlleyFacade: findByName(name)
                        return optional with alley
                        AlleyManager -> AlleyEntity: isActive()
                        return true
                    return alley

                    note right AlleyEndpoint
                        [...]
                    end note

                    AlleyEndpoint -> AlleyDifficultyLevelManager: getAllAlleyDifficultyLevels()
                        AlleyDifficultyLevelManager -> AlleyDifficultyLevelFacade: findAll()
                        return alleyDifficultyLevelsEntityList
                    return alleyDifficultyLevelsEntityList
end
@enduml