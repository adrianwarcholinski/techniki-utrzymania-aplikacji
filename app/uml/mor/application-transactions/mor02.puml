@startuml
title MOR.2 OdwoÅ‚aj rezerwacjÄ™
autoactivate on
participant ReservationEndpoint
participant "ReservationManager\nTransactionAttribute.REQUIRES_NEW" as ReservationManager
control "ReservationFacadeReadCommitted\nTransactionAttribute.MANDATORY" as ReservationFacade
participant EmailSender
control ReservationFacade
entity ReservationEntity
entity CustomerEntity
entity AccountEntity

alt reservation canceled properly
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return optional with reservation
        ReservationManager -> ReservationManager: cancelReservation(reservation)
            ReservationManager -> ReservationEntity: getEndDate()
            return future date
            ReservationManager -> ReservationEntity: getStartDate()
            return future date
            ReservationManager -> ReservationEntity: isActive()
            return true
            ReservationManager -> ReservationEntity: setActive(false)
            return success
            ReservationManager -> ReservationFacade: edit(reservation)
            return success
        return success
        ReservationManager -> ReservationEntity: getCustomer()
        return customer
        ReservationManager -> CustomerEntity: getAccount()
        return account
        ReservationManager -> AccountEntity: getEmail()
        return destinationEmail
        ReservationManager -> AccountEntity: getReservationNumber()
        return reservationNumber
        ReservationManager -> EmailCreator: getCancelReservationEmail(finalLanguage, destinationEmail, reservationNumber)
        return cancelReservationEmail
        ReservationManager -> EmailSender: sendEmail(cancelReservationEmail)
        return success
    return success
else reservation does not exist
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return empty optional
    return failed
else reservation was finished in the past
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return optional with reservation
        ReservationManager -> ReservationManager: cancelReservation(reservation)
            ReservationManager -> ReservationEntity: getEndDate()
            return past date
        return failed
    return failed
else reservation is in progress
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return optional with reservation
        ReservationManager -> ReservationManager: cancelReservation(reservation)
            ReservationManager -> ReservationEntity: getEndDate()
            return future date
            ReservationManager -> ReservationEntity: getStartDate()
            return past date
        return failed
    return failed
else reservation is canceled
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return optional with reservation
        ReservationManager -> ReservationManager: cancelReservation(reservation)
            ReservationManager -> ReservationEntity: getEndDate()
            return future date
            ReservationManager -> ReservationEntity: getStartDate()
            return future date
            ReservationManager -> ReservationEntity: isActive()
            return false
        return failed
    return failed
else email sending error
autonumber
    ReservationEndpoint -> ReservationManager: cancelReservation(reservationNumber, finalLanguage)
        ReservationManager -> ReservationFacade: findByReservationNumber(reservationNumber)
        return optional with reservation
        ReservationManager -> ReservationManager: cancelReservation(reservation)
            ReservationManager -> ReservationEntity: getEndDate()
            return future date
            ReservationManager -> ReservationEntity: getStartDate()
            return future date
            ReservationManager -> ReservationEntity: isActive()
            return true
            ReservationManager -> ReservationEntity: setActive(false)
            return success
            ReservationManager -> ReservationFacade: edit(reservation)
            return success
        return success
        ReservationManager -> ReservationEntity: getCustomer()
        return customer
        ReservationManager -> CustomerEntity: getAccount()
        return account
        ReservationManager -> AccountEntity: getEmail()
        return destinationEmail
        ReservationManager -> AccountEntity: getReservationNumber()
        return reservationNumber
        ReservationManager -> EmailCreator: getCancelReservationEmail(finalLanguage, destinationEmail, reservationNumber)
        return cancelReservationEmail
        ReservationManager -> EmailSender: sendEmail(cancelReservationEmail)
        return failed
    return failed
end


@enduml