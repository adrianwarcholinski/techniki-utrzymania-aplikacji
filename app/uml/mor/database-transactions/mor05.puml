@startuml
title
MOR.5 Edytuj szczegóły swojej rezerwacji
end title

autoactivate on
actor "Customer"
boundary EditReservationForm
participant ReservationEndpoint
participant SecurityContext
participant AlleyEndpoint
participant WeaponModelEndpoint
participant ReservationManager
participant AlleyManager
participant WeaponModelManager
control ReservationFacadeReadCommitted
control WeaponModelFacadeReadCommitted
control AlleyFacadeReadCommitted
control ReservationFacadeSerializable
control WeaponModelFacadeSerializable
control AlleyFacadeSerializable
entity ReservationEntity
entity AlleyEntity
entity WeaponModelEntity
entity WeaponModelEntity
entity CustomerEntity
entity AccountEntity
alt reservation exists, at least one active alley, at least one active weapon model
autonumber
    "Customer" -> EditReservationForm: 'edit' button clicked

    EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                    group RO, read committed
                        AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                        return list of all active alleys
                    end
                return list of all active alleys
            return status code 200, List<AlleyDto>
            EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
            return false

         EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                     WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                         group RO, read committed
                             WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                             return list of all active weapon models
                         end
                     return list of all active weapon models with available weapons
                 return status code 200, List<WeaponModelDto>
                 EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
                 return false

          EditReservationForm -> ReservationEndpoint: getConflictReservationsByWeaponModel(alleyName, date, weaponModelName, excludedReservationNumber)
                      ReservationEndpoint -> ReservationManager: getConflictReservationsByWeaponModel(date, alleyName, weaponModelName, excludedReservationNumber)
                          group RO, read committed
                              ReservationManager -> ReservationFacadeReadCommitted: findConflictReservationsByWeaponModel(dateWithOpeningHour, dateWithClosingHour, weaponSerialNumber, alleyName)
                              return list of conflict reservations
                              ReservationManager -> WeaponModelFacadeReadCommitted: findByName(weaponModelName)
                            return optional with weapon model
                            ReservationManager -> WeaponModelEntity: getWeapons().getSize()
                            return amount of active weapons of given model
                          end
                      return list of conflict reservations without excluded reservation
                  return status code 200\n List<reservationDto>

        EditReservationForm -> ReservationEndpoint: getOwnReservation(reservationNumber)
            ReservationEndpoint -> SecurityContext: getCallerPrincipal()
            return principal
            ReservationEndpoint -> ReservationManager: getOwnReservation(principal.getName(), reservationNumber)
                group RO, read committed
                    ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                    return optional with reservation
                    ReservationManager -> ReservationEntity: getCustomer()
                    return optional with Customer
                    ReservationManager -> CustomerEntity: getAccount()
                    return account
                    ReservationManager -> AccountEntity: getLogin()
                    return account login
                end
            return reservation
        return status code 200\nownReservationDto


    return show reservation details and available options
            

        "Customer" -> EditReservationForm: 'submit' button clicked and confirmed
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
            EditReservationForm -> ReservationEndpoint: updateOwnReservation(language, editOwnReservationDto)
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            ReservationEndpoint -> SecurityContext: getCallerPrincipal()
            return principal
            ReservationEndpoint -> Principal: getName()
            return login
            ReservationEndpoint -> EditOwnReservationDto: getVersion()
            return encryptedVersion
            ReservationEndpoint -> Crypt: decrypt(encryptedVersion)
            return version
            ReservationEndpoint -> EditOwnReservationDto: setVersion(version)
            return
            ReservationEndpoint -> EditOwnReservationDto: getId()
            return encryptedId
            ReservationEndpoint -> Crypt: decrypt(encryptedId)
            return id
            ReservationEndpoint -> EditOwnReservationDto: setId(id)
            return
            ReservationEndpoint -> EditOwnReservationDto: map(editOwnReservationDto)
            return reservation
                ReservationEndpoint -> ReservationManager: updateOwnReservation(login, reservation, language)
                    group RW, serializable
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                        ReservationManager -> ReservationFacadeSerializable: find(reservation.getId())
                        return optional with originalReservation
                        ReservationManager -> ReservationEntity: getCustomer()
                        return optional with customer
                        ReservationManager -> CustomerEntity: getAccount()
                        return account
                        ReservationManager -> AccountEntity: getLogin()
                        return account login

                        alt correct
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return success
                        else reservation is already canceled
                        autonumber 62
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already canceled
                        else reservation is already finished
                        autonumber 62
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already finished
                        else reservation is already in progress
                        autonumber 62
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already in progress
                        end

                        alt correct
                        ReservationManager -> ReservationManager: checkReservationDuration(reservation.getStartDate(), reservation.getEndDate())
                        return success
                        else reservation is too long
                        autonumber 64
                        ReservationManager -> ReservationManager: checkReservationDuration(reservation.getStartDate(), reservation.getEndDate())
                        return reservation is too long
                        end

                        alt correct
                        ReservationManager -> ReservationManager: checkOpeningHours(reservation.getStartDate(), reservation.getEndDate())
                        return success
                        else reservation during closing hours
                        autonumber 66
                        ReservationManager -> ReservationManager: checkOpeningHours(reservation.getStartDate(), reservation.getEndDate())
                        return reservation during closing hours
                        end


                        alt correct

                                ReservationManager -> AlleyFacadeSerializable: findByName(reservation.getAlley().getName())
                                return optional with alley
                                ReservationManager -> AlleyEntity: isActive
                                return true

                        else alley is inactive
                        autonumber 68

                                ReservationManager -> AlleyFacadeSerializable: findByName(reservation.getAlley().getName())
                                return optional with alley
                                ReservationManager -> AlleyEntity: isActive
                                return false

                        else alley does not exist
                        autonumber 68

                                ReservationManager -> AlleyFacadeSerializable: findByName(reservation.getAlley().getName())
                                return empty optional

                        end
                        alt correct

                                ReservationManager -> WeaponModelFacadeSerializable: findByName(reservation.getWeapon().getWeaponModel().getName())
                                return optional with weapon model
                                ReservationManager -> WeaponModelEntity: isActive()
                                return true
                                ReservationManager -> WeaponModelEntity: getWeapons()
                                return all weapons
                                group loop
                                    ReservationManager -> WeaponModelEntity: isActive()
                                    return true or false
                                end
                        else weapon model does not exist
                        autonumber 70

                                ReservationManager -> WeaponModelFacade: findByName(reservation.getWeapon().getWeaponModel().getName())
                                return empty optional
                        else weapon model is inactive
                        autonumber 70

                                ReservationManager -> WeaponModelFacadeSerializable: findByName(reservation.getWeapon().getWeaponModel().getName())
                                return optional with weapon model
                                ReservationManager -> WeaponModelEntity: isActive()
                                return false

                        else no active weapons
                        autonumber 70

                                ReservationManager -> WeaponModelFacade: findByName(reservation.getWeapon().getWeaponModel().getName())
                                return optional with weapon model
                                ReservationManager -> WeaponModelEntity: isActive()
                                return true
                                ReservationManager -> WeaponModelEntity: getWeapons()
                                return all weapons
                                group loop
                                    ReservationManager -> WeaponModelEntity: isActive()
                                    return false
                                end

                        end
                        ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeaponModel(reservation.getStartDate(), reservation.getEndDate(), weaponModel.getName(), alley.getName())
                        return conflict reservations
                        opt reservation is editable, within working hours and maximum duration, weapon and alley is available
                            ReservationManager -> ReservationEntity: copyNotChangedReservationData(originalReservation)
                            return success
                            ReservationManager -> ReservationEntity: setWeapon(weapon)
                            return success
                            ReservationManager -> ReservationEntity: setAlley(alley)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: edit(reservation)
                            return success
                            ReservationManager -> EmailCreator: getEmailForReservationEdit(emailDetails)
                            return email
                            ReservationManager -> EmailSender: sendEmail(email)
                            return success
                        end
                    end
                    alt correct
                                ReservationManager --> ReservationEndpoint: success
                            ReservationEndpoint --> EditReservationForm: status code 200
                        EditReservationForm --> Customer: 'success' message
                    else alley is not available
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: alley is not available
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else weapon model is not available
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: weapon model is not available
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else reservation is already canceled
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: reservation is already canceled
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else reservation is already finished
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: reservation is already finished
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else reservation is already in progress
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: reservation is already in progress
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else reservation is too long
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: reservation is too long
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    else reservation during closing hours
                    autonumber 84
                                ReservationManager --> ReservationEndpoint: reservation during closing hours
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Customer: 'error' message
                    end
else no active alleys
autonumber
        "Customer" -> EditReservationForm: 'edit' button clicked

        EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                    AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                        group RO, read committed
                            AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                            return list of all active alleys
                        end
                    return list of all active alleys
                return status code 200, List<AlleyDto>
                EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
                return true

        return 'error' message
else no active weapon models with active weapons
autonumber
        "Customer" -> EditReservationForm: 'edit' button clicked

        EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                    AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                        group RO, read committed
                            AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                            return list of all active alleys
                        end
                    return list of all active alleys
                return status code 200, List<AlleyDto>
                EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
                return false

             EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                         WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                             group RO, read committed
                                 WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                                 return list of all active weapon models
                             end
                         return list of all active weapon models with available weapons
                     return status code 200, List<WeaponModelDto>
                     EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
                     return true

        return 'error' message
else reservation does not exist
autonumber
       "Customer" -> EditReservationForm: 'edit' button clicked

       EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                   AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                       group RO, read committed
                           AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                           return list of all active alleys
                       end
                   return list of all active alleys
               return status code 200, List<AlleyDto>
               EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
               return false

            EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                        WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                            group RO, read committed
                                WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                                return list of all active weapon models
                            end
                        return list of all active weapon models with available weapons
                    return status code 200, List<WeaponModelDto>
                    EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
                    return false

             EditReservationForm -> ReservationEndpoint: getConflictReservationsByWeaponModel(alleyName, date, weaponModelName, excludedReservationNumber)
                         ReservationEndpoint -> ReservationManager: getConflictReservationsByWeaponModel(date, alleyName, weaponModelName, excludedReservationNumber)
                             group RO, read committed
                                 ReservationManager -> ReservationFacadeReadCommitted: findConflictReservationsByWeaponModel(dateWithOpeningHour, dateWithClosingHour, weaponSerialNumber, alleyName)
                                 return list of conflict reservations
                                 ReservationManager -> WeaponModelFacadeReadCommitted: findByName(weaponModelName)
                               return optional with weapon model
                               ReservationManager -> WeaponModelEntity: getWeapons().getSize()
                               return amount of active weapons of given model
                             end
                         return list of conflict reservations without excluded reservation
                     return status code 200\n List<reservationDto>

           EditReservationForm -> ReservationEndpoint: getOwnReservation(reservationNumber)
               ReservationEndpoint -> SecurityContext: getCallerPrincipal()
               return principal
               ReservationEndpoint -> ReservationManager: getOwnReservation(principal.getName(), reservationNumber)
                   group RO, read committed
                       ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                       return empty optional
                   end
               return reservation does not exist
           return status code 400


       return 'error' message
else reservation does not belong to user
autonumber
       "Customer" -> EditReservationForm: 'edit' button clicked

       EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                   AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                       group RO, read committed
                           AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                           return list of all active alleys
                       end
                   return list of all active alleys
               return status code 200, List<AlleyDto>
               EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
               return false

            EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                        WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                            group RO, read committed
                                WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                                return list of all active weapon models
                            end
                        return list of all active weapon models with available weapons
                    return status code 200, List<WeaponModelDto>
                    EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
                    return false

             EditReservationForm -> ReservationEndpoint: getConflictReservationsByWeaponModel(alleyName, date, weaponModelName, excludedReservationNumber)
                         ReservationEndpoint -> ReservationManager: getConflictReservationsByWeaponModel(date, alleyName, weaponModelName, excludedReservationNumber)
                             group RO, read committed
                                 ReservationManager -> ReservationFacadeReadCommitted: findConflictReservationsByWeaponModel(dateWithOpeningHour, dateWithClosingHour, weaponSerialNumber, alleyName)
                                 return list of conflict reservations
                                 ReservationManager -> WeaponModelFacadeReadCommitted: findByName(weaponModelName)
                               return optional with weapon model
                               ReservationManager -> WeaponModelEntity: getWeapons().getSize()
                               return amount of active weapons of given model
                             end
                         return list of conflict reservations without excluded reservation
                     return status code 200\n List<reservationDto>

           EditReservationForm -> ReservationEndpoint: getOwnReservation(reservationNumber)
               ReservationEndpoint -> SecurityContext: getCallerPrincipal()
               return principal
               ReservationEndpoint -> ReservationManager: getOwnReservation(principal.getName(), reservationNumber)
                   group RO, read committed
                       ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                       return optional with reservation
                       ReservationManager -> ReservationEntity: getCustomer()
                       return optional with Customer
                       ReservationManager -> CustomerEntity: getAccount()
                       return account
                       ReservationManager -> AccountEntity: getLogin()
                       return account login
                   end
               return reservation does not belong to user
           return status code 400


       return 'error' message
end
@enduml
