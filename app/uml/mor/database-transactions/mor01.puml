@startuml
title
MOR.1 Dokonaj rezerwacji.
end title

autoactivate on
actor "Customer"
boundary CreateReservationForm
participant ReservationEndpoint
participant AlleyEndpoint
participant WeaponModelEndpoint
participant ReservationManager
participant SecurityContext
participant AlleyManager
participant WeaponModelManager
participant EmailCreator
participant EmailSender
control WeaponModelFacadeReadCommitted
control AlleyFacadeReadCommitted
control ReservationFacadeReadCommitted
control ReservationFacadeSerializable
control WeaponModelFacadeSerializable
control CustomerFacadeSerializable
entity ReservationEntity
entity AlleyEntity
entity WeaponModelEntity
entity WeaponModelEntity
entity WeaponEntity
entity CustomerEntity

alt correct
autonumber
    "Customer" -> CreateReservationForm: 'create reservation' button clicked
        CreateReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                     group RO, read committed
                        AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                        return list of all active alleys
                     end
                return list of all active alleys
        return status code 200, List<AlleyDto>
        CreateReservationForm -> CreateReservationForm: isEmptyAlleysList(response)
        return false
        CreateReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                    group RO, read committed
                        WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                        return list of all active weapon models
                    end
                return list of all active weapon models
        return status code 200, List<WeaponModelDto>
        CreateReservationForm -> CreateReservationForm: isEmptyWeaponModelList(response)
        return false
    return show available options
    "Customer" -> CreateReservationForm: select alley, weapon model and date.
        CreateReservationForm -> ReservationEndpoint: getConflictReservationsByWeaponModel(alleyName, date, weaponModelName, null)
            ReservationEndpoint -> ReservationManager: getConflictReservationsByWeaponModel(date, alleyName, weaponModelName, excludedReservationNumber)
                group RO, read committed
                    ReservationManager -> ReservationFacadeReadCommitted: findConflictedReservationByWeaponModel(startDate, endDate, weaponModelName, alleyName)
                    return list of conflicted reservations
                end
           return list of conflicted reservations
        return status code 200\nlist of conflicted reservations
    return available time of reservation

        alt correct
        autonumber
        "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
            CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                group RW, serializable
                        ReservationManager -> SecurityContext: getCallerPrincipal()
                        return principal
                        ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                        return optional with customer
                        ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                        return alley
                        ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                        return optional with weapon model
                        ReservationManager -> WeaponModelEntity: isActive()
                        return true
                        ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                        return success
                        ReservationManager -> ReservationManager: checkOpeningHours(startDate, endDate)
                        return success
                        ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeaponModel(startDate, endDate, weaponModelName, alleyName)
                        return list of conflict reservations
                        ReservationManager -> ReservationManager: checkIfAlleyIsAvailable(conflictedReservations, alleyEntity)
                        return success
                        ReservationManager -> ReservationManager: getActiveWeaponByWeaponModel(conflictedReservation, weaponModelEntity)
                        return weapon to reserve
                        ReservationManager -> ReservationManager: addReservation(reservationEntity, customerEntity, alleyEntity, weaponToReserve)
                            ReservationManager -> ReservationEntity: setActive(true)
                            return success
                            ReservationManager -> ReservationEntity: setAlley(alleyEntity)
                            return success
                            ReservationManager -> ReservationEntity: setWeapon(weaponToReserve)
                            return success
                            ReservationManager -> ReservationEntity: setCustomer(customerEntity)
                            return success
                            ReservationManager -> WeaponEntity: getReservation()
                            return list of reservations
                            ReservationManager -> List: add(reservationEntity)
                            return success
                            ReservationManager -> AlleyEntity: getReservation()
                            return list of reservations
                            ReservationManager -> List: add(reservationEntity)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: create(alleyEntity)
                            return success
                        return success
                        ReservationManager -> CustomerEntity: getEmail()
                        return email of customer
                        ReservationManager -> ReservationEntity: getReservationNumber()
                        return reservation number
                        ReservationManager -> EmailCreator: getMakeReservationEmail(language, customerEmail, reservationNumber)
                        return make reservation email
                        ReservationManager -> EmailSender: sendEmail(makeReservationEmail)
                        return success
                 end
                 return success
             return status code 200
         return "Reservation added successfully" message.
        else invalid data
        autonumber
        "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
            CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
            return status code 400
        return "invalid data" message
        else customer does not exist
        autonumber
        "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                       ReservationEndpoint -> ReservationEntity *: <<create>>
                       ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                       group RW, serializable
                             ReservationManager -> SecurityContext: getCallerPrincipal()
                             return principal
                             ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                             return customer does not exist
                        end
                       return customer does not exist
                 return status code 400
        return "customer does not exist" message
        else alley does not exist
        autonumber
        "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                     ReservationEndpoint -> ReservationEntity *: <<create>>
                     ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley does not exist
                     end
                   return alley does not exist
                return status code 400
        return "alley does not exist" message
        else alley is already deactivated
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, read serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley is already deactivated
                     end
                     return alley is already deactivated
                  return status code 400
          return "alley is already deactivated" message
        else weapon model does not exist
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return empty optional
                     end
                     return weapon model does not exist
                  return status code 400
          return "weapon model does not exist" message
        else weapon model is not active
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return false
                     end
                     return weapon model is not active
                  return status code 400
          return "weapon model is not active" message
        else Reservation is too long
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return true
                            ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                            return reservation is too long
                     end
                     return reservation is too long
                  return status code 400
          return "reservation is too long" message
        else Reservation during closing hours
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return true
                            ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                            return success
                            ReservationManager -> ReservationManager: checkOpeningHours(startDate, endDate)
                            return reservation during closing hours
                     end
                     return reservation during closing hours
                  return status code 400
          return "Reservation during closing hours" message
        else Alley is not available
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return true
                            ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                            return success
                            ReservationManager -> ReservationManager: checkOpeningHours(startDate, endDate)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeaponModel(startDate, endDate, weaponModelName, alleyName)
                            return list of conflict reservations
                            ReservationManager -> ReservationManager: checkIfAlleyIsAvailable(conflictedReservations, alleyEntity)
                            return alley is not available
                     end
                     return alley is not available
                  return status code 400
          return "Alley is not available" message
        else Weapon model is not available
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacade: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return true
                            ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                            return success
                            ReservationManager -> ReservationManager: checkOpeningHours(startDate, endDate)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeaponModel(startDate, endDate, weaponModelName, alleyName)
                            return list of conflict reservations
                            ReservationManager -> ReservationManager: checkIfAlleyIsAvailable(conflictedReservations, alleyEntity)
                            return success
                            ReservationManager -> ReservationManager: getActiveWeaponByWeaponModel(conflictedReservation, weaponModelEntity)
                            return weapon model is not available
                     end
                     return weapon model is not available
                  return status code 400
          return "Weapon model is not available" message
        else Error when sending an email
        autonumber
         "Customer" -> CreateReservationForm: 'submit' button clicked and confirmed
                CreateReservationForm -> ReservationEndpoint: makeReservation(language, reservationDto)
                    ReservationEndpoint -> ReservationEntity *: <<create>>
                    ReservationEndpoint -> ReservationManager: makeReservation(reservationEntity, alleyName, weaponModelName, language)
                     group RW, serializable
                            ReservationManager -> SecurityContext: getCallerPrincipal()
                            return principal
                            ReservationManager -> CustomerFacadeSerializable: findByLogin(login)
                            return customer does not exist
                            ReservationManager -> ReservationManager: getActiveAlleyByName(alleyName)
                            return alley
                            ReservationManager -> WeaponModelFacadeSerializable: findByName(weaponModelName)
                            return weapon to reserve
                            ReservationManager -> WeaponModelEntity: isActive()
                            return true
                            ReservationManager -> ReservationManager: checkReservationDuration(startDate, endDate)
                            return success
                            ReservationManager -> ReservationManager: checkOpeningHours(startDate, endDate)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeaponModel(startDate, endDate, weaponModelName, alleyName)
                            return list of conflict reservations
                            ReservationManager -> ReservationManager: checkIfAlleyIsAvailable(conflictedReservations, alleyEntity)
                            return success
                            ReservationManager -> ReservationManager: getActiveWeaponByWeaponModel(conflictedReservation, weaponModelEntity)
                            return weapon to reserve
                            ReservationManager -> ReservationManager: addReservation(reservationEntity, customerEntity, alleyEntity, weaponToReserve)
                                ReservationManager -> ReservationEntity: setActive(true)
                                return success
                                ReservationManager -> ReservationEntity: setAlley(alleyEntity)
                                return success
                                ReservationManager -> ReservationEntity: setWeapon(weaponToReserve)
                                return success
                                ReservationManager -> ReservationEntity: setCustomer(customerEntity)
                                return success
                                ReservationManager -> WeaponEntity: getReservation()
                                return list of reservations
                                ReservationManager -> List: add(reservationEntity)
                                return success
                                ReservationManager -> AlleyEntity: getReservation()
                                return list of reservations
                                ReservationManager -> List: add(reservationEntity)
                                return success
                                ReservationManager -> ReservationFacadeSerializable: create(alleyEntity)
                                return success
                            return success
                        ReservationManager -> CustomerEntity: getEmail()
                        return email of customer
                        ReservationManager -> ReservationEntity: getReservationNumber()
                        return reservation number
                        ReservationManager -> EmailCreator: getMakeReservationEmail(language, customerEmail, reservationNumber)
                        return make reservation email
                        ReservationManager -> EmailSender: sendEmail(makeReservationEmail)
                        return error when sending an email
                     end
                     return error when sending an email
                  return status code 400
          return "Internal problem" message
         end
else no active alleys
autonumber
    "Customer" -> CreateReservationForm: 'create reservation' button clicked
        CreateReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                     group RO, read committed
                        AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                        return empty list
                     end
                return empty list
        return status code 200, empty list
        CreateReservationForm -> CreateReservationForm: isEmptyAlleysList(response)
        return true
        CreateReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModels()
                WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModels()
                    group RO, read committed
                        WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                        return list of all active weapon models
                    end
                return list of all active weapon models
        return status code 200, List<WeaponModelDto>
        CreateReservationForm -> CreateReservationForm: isEmptyWeaponModelList(response)
        return false
    return "currently weapon models or alleys are not available" message
else no active weapon models
autonumber
    "Customer" -> CreateReservationForm: 'create reservation' button clicked
        CreateReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                     group RO, read committed
                        AlleyManager -> AlleyFacade: findByActive(true)
                        return list of all active alleys
                     end
                return list of all active alleys
        return status code 200, List<AlleyDto>
        CreateReservationForm -> CreateReservationForm: isEmptyAlleysList(response)
        return false
        CreateReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                    group RO, read committed
                        WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                        return empty list
                    end
                return empty list
        return status code 200, empty list
        CreateReservationForm -> CreateReservationForm: isEmptyWeaponModelList(response)
        return true
    return "currently weapon models or alleys are not available" message
end
@enduml


