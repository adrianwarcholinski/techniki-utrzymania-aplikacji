@startuml

title MOR.21 Edytuj szczegóły modelu broni
autoactivate on
actor Employee
boundary WeaponModelDetails
boundary EditWeaponModelForm
participant WeaponModelEndpoint
participant WeaponCategoryEndpoint
participant WeaponModelManager
participant WeaponCategoryManager
entity WeaponModelEntity
control WeaponModelFacadeReadCommitted as WeaponModelFacade
control WeaponCategoryFacadeReadCommitted as WeaponCategoryFacade
entity WeaponCategoryEntity

alt weapon model exists
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return weaponCategoryEntities
                end
                return weaponCategoryEntities
                WeaponCategoryEndpoint -> WeaponCategoryEndpoint: map(weaponCategoryEntities)
                return weaponCategoryDtos
        return status code 200 \n weaponCategoryDtos

        WeaponModelDetails -> WeaponModelEndpoint: getWeaponModel(name)
            WeaponModelEndpoint -> WeaponModelManager: getWeaponModel(name)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: findByName(name)
                    return optional with weaponModelEntity
                end
                return weaponModelEntity
                WeaponModelEndpoint -> EditWeaponModelDto: convertToDto(weaponModelEntity)
                return editWeaponModelDto
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getId())
                return encryptedId
                WeaponModelEndpoint -> EditWeaponModelDto: setId(encryptedId)
                return success
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getVersion())
                return encryptedVersion
                WeaponModelEndpoint -> EditWeaponModelDto: setVersion(encryptedVersion)
                return success
        return status code 200 \n editWeaponModelDto
    return show edit weapon model form

    Employee -> EditWeaponModelForm: 'edit' button clicked and confirmed
        EditWeaponModelForm -> WeaponModelEndpoint: editWeaponModel(editWeaponModelDto)
            WeaponModelEndpoint -> WeaponCategoryEntity *: <<create>>
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getId())
            return decryptedId
            WeaponModelEndpoint -> EditWeaponModelDto: setId(decryptedId)
            return success
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getVersion())
            return decryptedVersion
            WeaponModelEndpoint -> EditWeaponModelDto: setVersion(decryptedVersion)
            return success
            WeaponModelEndpoint -> EditWeaponModelDto: convertToEntity(editWeaponModelDto)
            return weaponModelEntity
            WeaponModelEndpoint -> WeaponModelManager: editWeaponModel(weaponModelEntity)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: find(weaponModelEntity.getId())
                    return optional with weaponModel
                    WeaponModelManager -> WeaponModelEntity: isActive()
                    return true
                    WeaponModelManager -> WeaponModelEntity: copyNotChangedData(weaponModelEntity)
                    return success
                    WeaponModelManager -> WeaponCategoryFacade: findByName(name)
                    return optional with weapon category
                    WeaponModelManager -> WeaponModelEntity: setWeaponCategory(weaponCategoryEntity)
                    return success
                    WeaponModelManager -> WeaponModelEntity: edit(weaponModelEntity)
                    return success
                end
            return success
        return status code 200
    return 'success' message

else weapon model does not exist
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return weaponCategoryEntities
                end
                return weaponCategoryEntities
                WeaponCategoryEndpoint -> WeaponCategoryEndpoint: map(weaponCategoryEntities)
            return weaponCategoryDtos
        return status code 200 \n weaponCategoryDtos

        WeaponModelDetails -> WeaponModelEndpoint: getWeaponModel(name)
            WeaponModelEndpoint -> WeaponModelManager: getWeaponModel(name)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: findByName(name)
                    return empty optional
                end
            return weapon model does not exist
        return status code 400
    return 'failed' message

else weapon category does not exist
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return weaponCategoryEntities
                end
                return weaponCategoryEntities
                WeaponCategoryEndpoint -> WeaponCategoryEndpoint: map(weaponCategoryEntities)
                return weaponCategoryDtos
        return status code 200 \n weaponCategoryDtos

        WeaponModelDetails -> WeaponModelEndpoint: getWeaponModel(name)
            WeaponModelEndpoint -> WeaponModelManager: getWeaponModel(name)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: findByName(name)
                    return optional with weaponModelEntity
                end
                return optional with weaponModelEntity
                WeaponModelEndpoint -> EditWeaponModelDto: convertToDto(weaponModelEntity)
                return editWeaponModelDto
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getId())
                return encryptedId
                WeaponModelEndpoint -> EditWeaponModelDto: setId(encryptedId)
                return success
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getVersion())
                return encryptedVersion
                WeaponModelEndpoint -> EditWeaponModelDto: setVersion(encryptedVersion)
                return success
        return status code 200 \n editWeaponModelDto
    return show edit weapon model form

    Employee -> EditWeaponModelForm: 'edit' button clicked and confirmed
        EditWeaponModelForm -> WeaponModelEndpoint: editWeaponModel(editWeaponModelDto)
            WeaponModelEndpoint -> WeaponCategoryEntity *: <<create>>
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getId())
            return decryptedId
            WeaponModelEndpoint -> EditWeaponModelDto: setId(decryptedId)
            return success
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getVersion())
            return decryptedVersion
            WeaponModelEndpoint -> EditWeaponModelDto: setVersion(decryptedVersion)
            return success
            WeaponModelEndpoint -> EditWeaponModelDto: convertToEntity(editWeaponModelDto)
            return weaponModelEntity
            WeaponModelEndpoint -> WeaponModelManager: editWeaponModel(weaponModelEntity)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: find(weaponModelEntity.getId())
                    return optional with weaponModel
                    WeaponModelManager -> WeaponModelEntity: isActive()
                    return true
                    WeaponModelManager -> WeaponModelEntity: copyNotChangedData(weaponModelEntity)
                    return success
                    WeaponModelManager -> WeaponCategoryFacade: findByName(name)
                    return empty optional
                end
            return weapon category does not exist
        return status code 400
    return 'failed' message

else weapon category is inactive
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return weaponCategoryEntities
                end
                return weaponCategoryEntities
                WeaponCategoryEndpoint -> WeaponCategoryEndpoint: map(weaponCategoryEntities)
                return weaponCategoryDtos
        return status code 200 \n weaponCategoryDtos

        WeaponModelDetails -> WeaponModelEndpoint: getWeaponModel(name)
            WeaponModelEndpoint -> WeaponModelManager: getWeaponModel(name)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: findByName(name)
                    return optional with weaponModelEntity
                end
                return optional with weaponModelEntity
                WeaponModelEndpoint -> EditWeaponModelDto: convertToDto(weaponModelEntity)
                return editWeaponModelDto
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getId())
                return encryptedId
                WeaponModelEndpoint -> EditWeaponModelDto: setId(encryptedId)
                return success
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getVersion())
                return encryptedVersion
                WeaponModelEndpoint -> EditWeaponModelDto: setVersion(encryptedVersion)
                return success
        return status code 200 \n editWeaponModelDto
    return show edit weapon model form

    Employee -> EditWeaponModelForm: 'edit' button clicked and confirmed
        EditWeaponModelForm -> WeaponModelEndpoint: editWeaponModel(editWeaponModelDto)
            WeaponModelEndpoint -> WeaponCategoryEntity *: <<create>>
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getId())
            return decryptedId
            WeaponModelEndpoint -> EditWeaponModelDto: setId(decryptedId)
            return success
            WeaponModelEndpoint -> Crypt: decrypt(editWeaponModelDto: getVersion())
            return decryptedVersion
            WeaponModelEndpoint -> EditWeaponModelDto: setVersion(decryptedVersion)
            return success
            WeaponModelEndpoint -> EditWeaponModelDto: convertToEntity(editWeaponModelDto)
            return weaponModelEntity
            WeaponModelEndpoint -> WeaponModelManager: editWeaponModel(weaponModelEntity)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: find(weaponModelEntity.getId())
                    return optional with weaponModel
                    WeaponModelManager -> WeaponModelEntity: isActive()
                    return false
                end
            return weapon category does not exist
        return status code 400
    return 'failed' message

else no weapon categories
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return empty list
                end
            return no weapon categories
        return status code 400
    return show 'no weapon categories' message

else invalid data
autonumber
    Employee -> WeaponModelDetails: 'edit' button clicked
        WeaponModelDetails -> WeaponCategoryEndpoint: getAllWeaponCategories()
            WeaponCategoryEndpoint -> WeaponCategoryManager: getAllWeaponCategories()
                group RO, read committed
                    WeaponCategoryManager -> WeaponCategoryFacade: findAll()
                    return weaponCategoryEntities
                end
                return weaponCategoryEntities
                WeaponCategoryEndpoint -> WeaponCategoryEndpoint: map(weaponCategoryEntities)
                return weaponCategoryDtos
        return status code 200 \n weaponCategoryDtos

        WeaponModelDetails -> WeaponModelEndpoint: getWeaponModel(name)
            WeaponModelEndpoint -> WeaponModelManager: getWeaponModel(name)
                group RW, read committed
                    WeaponModelManager -> WeaponModelFacade: findByName(name)
                    return optional with weaponModelEntity
                end
                return optional with weaponModelEntity
                WeaponModelEndpoint -> EditWeaponModelDto: convertToDto(weaponModelEntity)
                return editWeaponModelDto
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getId())
                return encryptedId
                WeaponModelEndpoint -> EditWeaponModelDto: setId(encryptedId)
                return success
                WeaponModelEndpoint -> Crypt: encrypt(editWeaponModelDto.getVersion())
                return encryptedVersion
                WeaponModelEndpoint -> EditWeaponModelDto: setVersion(encryptedVersion)
                return success
        return status code 200 \n editWeaponModelDto
    return show edit weapon model form

    Employee -> EditWeaponModelForm: 'edit' button clicked and confirmed
        EditWeaponModelForm -> WeaponModelEndpoint: editWeaponModel(editWeaponModelDto)
        return status code 400
    return 'failed' message
end
@enduml