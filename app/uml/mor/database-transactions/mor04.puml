@startuml
title
MOR.4 Edytuj szczegóły rezerwacji
end title

autoactivate on
actor "Employee"
boundary EditReservationForm
participant ReservationEndpoint
participant AlleyEndpoint
participant WeaponEndpoint
participant WeaponModelEndpoint
participant ReservationManager
participant AlleyManager
participant WeaponManager
participant WeaponModelManager
control ReservationFacadeReadCommitted
control AlleyFacadeReadCommitted
control WeaponFacadeReadCommitted
control WeaponModelFacadeReadCommitted
control ReservationFacadeSerializable
control AlleyFacadeSerializable
control WeaponFacadeSerializable
control WeaponModelFacadeSerializable
entity ReservationEntity
entity AlleyEntity
entity WeaponEntity
alt reservation exists, at least one active alley, at least one active weapon model with active weapon
autonumber

    "Employee" -> EditReservationForm: 'edit' button clicked

        EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
            AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                group RO, read committed
                    AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                    return list of all active alleys
                end
            return list of all active alleys
        return status code 200, List<AlleyDto>
        EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
        return false

        EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
            WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                group RO, read committed
                    WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                    return list of all active weapon models
                end
            return list of all active weapon models with available weapons
        return status code 200, List<WeaponModelDto>
        EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
        return false

        EditReservationForm -> ReservationEndpoint: getReservation(reservationNumber)
            ReservationEndpoint -> ReservationManager: getReservation(reservationNumber)
                group RO, read committed
                    ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                    return optional with reservation
                end
            return reservation
        return status code 200\nreservationDto

        EditReservationForm -> ReservationEndpoint: getConflictReservationsByWeapon(date, alleyName, weaponSerialNumber, excludedReservationNumber)
            ReservationEndpoint -> ReservationManager: getConflictReservationsByWeapon(date, alleyName, weaponSerialNumber, excludedReservationNumber)
                group RO, read committed
                    ReservationManager -> ReservationFacadeReadCommitted: findConflictReservationsByWeapon(dateWithOpeningHour, dateWithClosingHour, weaponModelName, alleyName)
                    return list of conflict reservations
                end
            return list of conflict reservations without excluded reservation
        return status code 200\n List<reservationDto>

        EditReservationForm -> WeaponEndpoint: getAllActiveWeaponsByModelName(modelName)
            WeaponEndpoint -> WeaponManager: getAllActiveWeaponsByModelName(modelName)
                group RO, read committed
                    WeaponManager -> WeaponFacadeReadCommitted: findByActiveAndWeaponModelName(true, modelName)
                    return list of all active weapons of given weapon model
                end
            return list of all active weapons of given weapon model
        return status code 200, List<WeaponDto>
        EditReservationForm -> EditReservationForm: isEmptyWeaponList(response)
        return false
    return show reservation details and available options

        "Employee" -> EditReservationForm: 'submit' button clicked and confirmed
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
        activate EditReservationForm
            EditReservationForm -> ReservationEndpoint: updateReservation(language, editReservationDto)
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
            activate ReservationEndpoint
                ReservationEndpoint -> EditReservationDto: getVersion()
                return encryptedVersion
                ReservationEndpoint -> Crypt: decrypt(encryptedVersion)
                return version
                ReservationEndpoint -> EditReservationDto: setVersion(version)
                return success
                ReservationEndpoint -> EditReservationDto: getId()
                return encryptedId
                ReservationEndpoint -> Crypt: decrypt(encryptedId)
                return id
                ReservationEndpoint -> EditReservationDto: setId(id)
                return success
                ReservationEndpoint -> EditReservationDto: map(EditReservationDto)
                return reservation
                ReservationEndpoint -> ReservationManager: updateReservation(reservation, language)
                    group RW, serializable
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager
                    activate ReservationManager

                        ReservationManager -> ReservationFacadeSerializable: find(reservation.getId())
                        return optional with originalReservation

                        alt correct
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return success
                        else reservation is already canceled
                        autonumber 44
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already canceled
                        else reservation is already finished
                        autonumber 44
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already finished
                        else reservation is already in progress
                        autonumber 44
                        ReservationManager -> ReservationManager: checkReservationEditability(originalReservation)
                        return reservation is already in progress
                        end

                        alt correct
                        ReservationManager -> ReservationManager: checkReservationDuration(reservation.getStartDate(), reservation.getEndDate())
                        return success
                        else reservation is too long
                        autonumber 46
                        ReservationManager -> ReservationManager: checkReservationDuration(reservation.getStartDate(), reservation.getEndDate())
                        return reservation is too long
                        end

                        alt correct
                        ReservationManager -> ReservationManager: checkOpeningHours(reservation.getStartDate(), reservation.getEndDate())
                        return success
                        else reservation during closing hours
                        autonumber 48
                        ReservationManager -> ReservationManager: checkOpeningHours(reservation.getStartDate(), reservation.getEndDate())
                        return reservation during closing hours
                        end

                        alt correct
                                ReservationManager -> AlleyFacade: findByName(reservation.getAlley().getName())
                                return optional with alley
                                ReservationManager -> AlleyEntity: isActive
                                return true
                        else alley is inactive
                        autonumber 50

                                ReservationManager -> AlleyFacadeSerializable: findByName(reservation.getAlley().getName())
                                return optional with alley
                                ReservationManager -> AlleyEntity: isActive
                                return false

                        else alley does not exist
                        autonumber 50

                                ReservationManager -> AlleyFacadeSerializable: findByName(reservation.getAlley().getName())
                                return empty optional

                        end
                        alt correct

                                ReservationManager -> WeaponFacadeSerializable: findBySerialNumber(reservation.getWeapon().getSerialNumber())
                                return optional with weapon
                                ReservationManager -> WeaponEntity: isActive()
                                return true

                        else weapon is inactive
                        autonumber 52

                                ReservationManager -> WeaponFacadeSerializable: findBySerialNumber(reservation.getWeapon().getSerialNumber())
                                return optional with weapon
                                ReservationManager -> WeaponEntity: isActive()
                                return false

                        else weapon does not exist
                        autonumber 52

                                ReservationManager -> WeaponFacadeSerializable: findBySerialNumber(reservation.getWeapon().getSerialNumber())
                                return empty optional

                        end
                        ReservationManager -> ReservationFacadeSerializable: findConflictReservationsByWeapon(reservation.getStartDate(),reservation.getEndDate(), weapon.getSerialNumber(), alley.getName())
                        return conflict reservations
                        opt reservation is editable, within working hours and maximum duration, weapon and alley is available
                            ReservationManager -> ReservationEntity: copyNotChangedReservationData(originalReservation)
                            return success
                            ReservationManager -> ReservationEntity: setWeapon(weapon)
                            return success
                            ReservationManager -> ReservationEntity: setAlley(alley)
                            return success
                            ReservationManager -> ReservationFacadeSerializable: edit(reservation)
                            return success
                            ReservationManager -> EmailCreator: getEmailForReservationEdit(emailDetails)
                            return email
                            ReservationManager -> EmailSender: sendEmail(email)
                            return success
                        end
                    end
                    alt correct
                                ReservationManager --> ReservationEndpoint: success
                            ReservationEndpoint --> EditReservationForm: status code 200
                        EditReservationForm --> Employee: 'success' message
                    else alley is not available
                    autonumber 66
                                ReservationManager --> ReservationEndpoint: alley is not available
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Employee: 'error' message
                    else weapon is not available
                    autonumber 66
                                ReservationManager --> ReservationEndpoint: weapon is not available
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Employee: 'error' message
                     else reservation is already canceled
                     autonumber 66
                                 ReservationManager --> ReservationEndpoint: reservation is already canceled
                             ReservationEndpoint --> EditReservationForm: status code 400
                         EditReservationForm --> Employee: 'error' message
                     else reservation is already finished
                     autonumber 66
                                 ReservationManager --> ReservationEndpoint: reservation is already finished
                             ReservationEndpoint --> EditReservationForm: status code 400
                         EditReservationForm --> Employee: 'error' message
                    else reservation is already in progress
                    autonumber 66
                                ReservationManager --> ReservationEndpoint: reservation is already in progress
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Employee: 'error' message
                    else reservation is too long
                    autonumber 66
                                ReservationManager --> ReservationEndpoint: reservation is too long
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Employee: 'error' message
                    else reservation during closing hours
                    autonumber 66
                                ReservationManager --> ReservationEndpoint: reservation during closing hours
                            ReservationEndpoint --> EditReservationForm: status code 400
                        EditReservationForm --> Employee: 'error' message
                    end

else no active alleys
autonumber
        "Employee" -> EditReservationForm: 'edit' button clicked
        EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
            AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                group RO, read committed
                    AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                    return list of all active alleys
                end
            return list of all active alleys
        return status code 200, List<AlleyDto>
        EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
        return true
        return 'error' message


else no active weapon models with active weapons
"Employee" -> EditReservationForm: 'edit' button clicked
         EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                    group RO, read committed
                        AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                        return list of all active alleys
                    end
                return list of all active alleys
            return status code 200, List<AlleyDto>
            EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
            return false

            EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                    group RO, read committed
                        WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                        return list of all active weapon models
                    end
                return list of all active weapon models with available weapons
            return status code 200, List<WeaponModelDto>
            EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
            return true
            return 'error' message

else reservation does not exist
"Employee" -> EditReservationForm: 'edit' button clicked
         EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                    group RO, read committed
                        AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                        return list of all active alleys
                    end
                return list of all active alleys
            return status code 200, List<AlleyDto>
            EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
            return false

            EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                    group RO, read committed
                        WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                        return list of all active weapon models
                    end
                return list of all active weapon models with available weapons
            return status code 200, List<WeaponModelDto>
            EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
            return false

            EditReservationForm -> ReservationEndpoint: getReservation(reservationNumber)
                ReservationEndpoint -> ReservationManager: getReservation(reservationNumber)
                    group RO, read committed
                        ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                        return empty optional
                    end
                return reservation does not exist
            return status code 400
        return 'error' message

else no available weapons of given model
"Employee" -> EditReservationForm: 'edit' button clicked
    EditReservationForm -> AlleyEndpoint: getAllActiveAlleys()
                    AlleyEndpoint -> AlleyManager: getAllActiveAlleys()
                        group RO, read committed
                            AlleyManager -> AlleyFacadeReadCommitted: findByActive(true)
                            return list of all active alleys
                        end
                    return list of all active alleys
                return status code 200, List<AlleyDto>
                EditReservationForm -> EditReservationForm: isEmptyAlleysList(response)
                return false

                EditReservationForm -> WeaponModelEndpoint: getAllActiveWeaponModelsWithActiveWeapons()
                    WeaponModelEndpoint -> WeaponModelManager: getAllActiveWeaponModelsWithActiveWeapons()
                        group RO, read committed
                            WeaponModelManager -> WeaponModelFacadeReadCommitted: findByActive(true)
                            return list of all active weapon models
                        end
                    return list of all active weapon models with available weapons
                return status code 200, List<WeaponModelDto>
                EditReservationForm -> EditReservationForm: isEmptyWeaponModelList(response)
                return false

                EditReservationForm -> ReservationEndpoint: getReservation(reservationNumber)
                    ReservationEndpoint -> ReservationManager: getReservation(reservationNumber)
                        group RO, read committed
                            ReservationManager -> ReservationFacadeReadCommitted: findByReservationNumber(reservationNumber)
                            return optional with reservation
                        end
                    return reservation
                return status code 200\nreservationDto

                EditReservationForm -> ReservationEndpoint: getConflictReservationsByWeapon(date, alleyName, weaponSerialNumber, excludedReservationNumber)
                    ReservationEndpoint -> ReservationManager: getConflictReservationsByWeapon(date, alleyName, weaponSerialNumber, excludedReservationNumber)
                        group RO, read committed
                            ReservationManager -> ReservationFacadeReadCommitted: findConflictReservationsByWeapon(dateWithOpeningHour, dateWithClosingHour, weaponSerialNumber, alleyName)
                            return list of conflict reservations
                        end
                    return list of conflict reservations without excluded reservation
                return status code 200\n List<reservationDto>

                EditReservationForm -> WeaponEndpoint: getAllActiveWeaponsByModelName(modelName)
                    WeaponEndpoint -> WeaponManager: getAllActiveWeaponsByModelName(modelName)
                        group RO, read committed
                            WeaponManager -> WeaponFacadeReadCommitted: findByActiveAndWeaponModelName(true, modelName)
                            return list of all active weapons of given weapon model
                        end
                    return list of all active weapons of given weapon model
                return status code 200, List<WeaponDto>
                EditReservationForm -> EditReservationForm: isEmptyWeaponList(response)
                return true
            return 'error' message
end
@enduml
